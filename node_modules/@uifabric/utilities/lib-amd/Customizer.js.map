{"version":3,"sources":["Customizer.tsx"],"names":[],"mappings":";;;;;;;;;;;;;IAgBA;;;;;;;;;;;;;OAaG;IACH;QAAgC,8BAAiD;QAO/E,oBAAY,KAAK,EAAE,OAAO;YAA1B,YACE,kBAAM,KAAK,CAAC,SAGb;YADC,KAAI,CAAC,KAAK,GAAG,KAAI,CAAC,iBAAiB,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;;QACtD,CAAC;QAEM,oCAAe,GAAtB;YACE,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;QACpB,CAAC;QAEM,8CAAyB,GAAhC,UAAiC,QAAQ,EAAE,UAAU;YAEnD,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,iBAAiB,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC,CAAC;QAC9D,CAAC;QAEM,2BAAM,GAAb;YACE,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;QAClD,CAAC;QAEO,sCAAiB,GAAzB,UAA0B,KAAuB,EAAE,OAAyB;YACpE,IAAA,mBAAqD,EAArD,mDAAqD,CAAW;YAChE,IAAA,0BAAyD,EAAzD,kDAAyD,CAAa;YAE5E,MAAM,CAAC;gBACL,aAAa,EAAE,eAAM,CAAC,EAAE,EAAE,wBAAwB,EAAE,yBAAyB,CAAC;aAC/E,CAAC;QACJ,CAAC;QACH,iBAAC;IAAD,CAlCA,AAkCC,CAlC+B,6BAAa;IAC7B,uBAAY,GAAG;QAC3B,aAAa,EAAE,KAAK,CAAC,SAAS,CAAC,MAAM;KACtC,CAAC;IAEY,4BAAiB,GAAG,UAAU,CAAC,YAAY,CAAC;IAL/C,gCAAU","file":"Customizer.js","sourcesContent":["import * as React from 'react';\r\nimport { BaseComponent } from './BaseComponent';\r\nimport { assign } from './object';\r\n\r\nexport interface ISettings {\r\n  [key: string]: any;\r\n}\r\n\r\nexport interface ICustomizerProps {\r\n  settings: ISettings;\r\n}\r\n\r\nexport interface ICustomizerState {\r\n  injectedProps?: ISettings;\r\n}\r\n\r\n/**\r\n * The Customizer component allows for default props to be mixed into components which\r\n * are decorated with the customizable() decorator. This enables injection scenarios like:\r\n *\r\n * 1. render svg icons instead of the icon font within all buttons\r\n * 2. inject a custom theme object into a component\r\n *\r\n * Props are provided via the settings prop, which should be a json map where the key is\r\n * the name of the customizable component, and the value is are the props to pass in.\r\n *\r\n * @export\r\n * @class Customizer\r\n * @extends {BaseComponent<ICustomizerProps, ICustomizerState>}\r\n */\r\nexport class Customizer extends BaseComponent<ICustomizerProps, ICustomizerState> {\r\n  public static contextTypes = {\r\n    injectedProps: React.PropTypes.object\r\n  };\r\n\r\n  public static childContextTypes = Customizer.contextTypes;\r\n\r\n  constructor(props, context) {\r\n    super(props);\r\n\r\n    this.state = this._getInjectedProps(props, context);\r\n  }\r\n\r\n  public getChildContext(): any {\r\n    return this.state;\r\n  }\r\n\r\n  public componentWillReceiveProps(newProps, newContext) {\r\n\r\n    this.setState(this._getInjectedProps(newProps, newContext));\r\n  }\r\n\r\n  public render() {\r\n    return React.Children.only(this.props.children);\r\n  }\r\n\r\n  private _getInjectedProps(props: ICustomizerProps, context: ICustomizerState) {\r\n    let { settings: injectedPropsFromSettings = {} as ISettings } = props;\r\n    let { injectedProps: injectedPropsFromContext = {} as ISettings } = context;\r\n\r\n    return {\r\n      injectedProps: assign({}, injectedPropsFromContext, injectedPropsFromSettings)\r\n    };\r\n  }\r\n}\r\n"],"sourceRoot":"..\\src"}