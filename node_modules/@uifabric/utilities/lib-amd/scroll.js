define(["require", "exports", "./dom", "./scroll.scss"], function (require, exports, dom_1, scroll_scss_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var _scrollbarWidth;
    var _bodyScrollDisabledCount = 0;
    exports.DATA_IS_SCROLLABLE_ATTRIBUTE = 'data-is-scrollable';
    function disableBodyScroll() {
        var doc = dom_1.getDocument();
        if (doc && doc.body && !_bodyScrollDisabledCount) {
            doc.body.classList.add(scroll_scss_1.default.msFabricScrollDisabled);
        }
        _bodyScrollDisabledCount++;
    }
    exports.disableBodyScroll = disableBodyScroll;
    function enableBodyScroll() {
        if (_bodyScrollDisabledCount > 0) {
            var doc = dom_1.getDocument();
            if (doc && doc.body && _bodyScrollDisabledCount === 1) {
                doc.body.classList.remove(scroll_scss_1.default.msFabricScrollDisabled);
            }
            _bodyScrollDisabledCount--;
        }
    }
    exports.enableBodyScroll = enableBodyScroll;
    /** Calculates the width of a scrollbar for the browser/os. */
    function getScrollbarWidth() {
        if (_scrollbarWidth === undefined) {
            var scrollDiv = document.createElement('div');
            scrollDiv.style.setProperty('width', '100px');
            scrollDiv.style.setProperty('height', '100px');
            scrollDiv.style.setProperty('overflow', 'scroll');
            scrollDiv.style.setProperty('position', 'absolute');
            scrollDiv.style.setProperty('top', '-9999px');
            document.body.appendChild(scrollDiv);
            // Get the scrollbar width
            _scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;
            // Delete the DIV
            document.body.removeChild(scrollDiv);
        }
        return _scrollbarWidth;
    }
    exports.getScrollbarWidth = getScrollbarWidth;
    /**
     * Traverses up the DOM for the element with the data-is-scrollable=true attribute, or returns
     * document.body.
     */
    function findScrollableParent(startingElement) {
        var el = startingElement;
        // First do a quick scan for the scrollable attribute.
        while (el && el !== document.body) {
            if (el.getAttribute(exports.DATA_IS_SCROLLABLE_ATTRIBUTE) === 'true') {
                return el;
            }
            el = el.parentElement;
        }
        // If we haven't found it, the use the slower method: compute styles to evaluate if overflow is set.
        el = startingElement;
        while (el && el !== document.body) {
            if (el.getAttribute(exports.DATA_IS_SCROLLABLE_ATTRIBUTE) !== 'false') {
                var styles_1 = getComputedStyle(el);
                var overflowY = styles_1 ? styles_1.getPropertyValue('overflow-y') : '';
                if (overflowY && (overflowY === 'scroll' || overflowY === 'auto')) {
                    return el;
                }
            }
            el = el.parentElement;
        }
        // Fall back to window scroll.
        if (!el || el === document.body) {
            el = window;
        }
        return el;
    }
    exports.findScrollableParent = findScrollableParent;
});

//# sourceMappingURL=scroll.js.map
