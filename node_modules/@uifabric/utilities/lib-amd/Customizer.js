var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define(["require", "exports", "react", "./BaseComponent", "./object"], function (require, exports, React, BaseComponent_1, object_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * The Customizer component allows for default props to be mixed into components which
     * are decorated with the customizable() decorator. This enables injection scenarios like:
     *
     * 1. render svg icons instead of the icon font within all buttons
     * 2. inject a custom theme object into a component
     *
     * Props are provided via the settings prop, which should be a json map where the key is
     * the name of the customizable component, and the value is are the props to pass in.
     *
     * @export
     * @class Customizer
     * @extends {BaseComponent<ICustomizerProps, ICustomizerState>}
     */
    var Customizer = (function (_super) {
        __extends(Customizer, _super);
        function Customizer(props, context) {
            var _this = _super.call(this, props) || this;
            _this.state = _this._getInjectedProps(props, context);
            return _this;
        }
        Customizer.prototype.getChildContext = function () {
            return this.state;
        };
        Customizer.prototype.componentWillReceiveProps = function (newProps, newContext) {
            this.setState(this._getInjectedProps(newProps, newContext));
        };
        Customizer.prototype.render = function () {
            return React.Children.only(this.props.children);
        };
        Customizer.prototype._getInjectedProps = function (props, context) {
            var _a = props.settings, injectedPropsFromSettings = _a === void 0 ? {} : _a;
            var _b = context.injectedProps, injectedPropsFromContext = _b === void 0 ? {} : _b;
            return {
                injectedProps: object_1.assign({}, injectedPropsFromContext, injectedPropsFromSettings)
            };
        };
        return Customizer;
    }(BaseComponent_1.BaseComponent));
    Customizer.contextTypes = {
        injectedProps: React.PropTypes.object
    };
    Customizer.childContextTypes = Customizer.contextTypes;
    exports.Customizer = Customizer;
});

//# sourceMappingURL=Customizer.js.map
