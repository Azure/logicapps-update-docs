{"version":3,"sources":["components/Dropdown/Dropdown.Props.ts"],"names":[],"mappings":";;AAIA,IAAY,oBAIX;AAJD,WAAY,oBAAoB;IAC9B,mEAAU,CAAA;IACV,qEAAW,CAAA;IACX,mEAAU,CAAA;AACZ,CAAC,EAJW,oBAAoB,GAApB,4BAAoB,KAApB,4BAAoB,QAI/B","file":"components/Dropdown/Dropdown.Props.js","sourcesContent":["import * as React from 'react';\r\nimport { IRenderFunction } from '../../Utilities';\r\nimport { Dropdown } from './Dropdown';\r\n\r\nexport enum DropdownMenuItemType {\r\n  Normal = 0,\r\n  Divider = 1,\r\n  Header = 2\r\n}\r\n\r\nexport interface IDropdown {\r\n\r\n}\r\n\r\nexport interface IDropdownProps extends React.Props<Dropdown> {\r\n  /**\r\n   * Optional callback to access the IDropdown interface. Use this instead of ref for accessing\r\n   * the public methods and properties of the component.\r\n   */\r\n  componentRef?: (component: IDropdown) => void;\r\n\r\n  /**\r\n   * Descriptive label for the Dropdown\r\n   */\r\n  label?: string;\r\n\r\n  /**\r\n  * Aria Label for the Dropdown for screen reader users.\r\n  */\r\n  ariaLabel?: string;\r\n\r\n  /**\r\n  * Id of the drop down\r\n  */\r\n  id?: string;\r\n\r\n  /**\r\n   * If provided, additional class name to provide on the root element.\r\n   */\r\n  className?: string;\r\n\r\n  /**\r\n   * The key that will be initially used to set a selected item.\r\n   */\r\n  defaultSelectedKey?: string | number;\r\n\r\n  /**\r\n   * The key of the selected item. If you provide this, you must maintain selection\r\n   * state by observing onChange events and passing a new value in when changed.\r\n   */\r\n  selectedKey?: string | number;\r\n\r\n  /**\r\n   * Collection of options for this Dropdown\r\n   */\r\n  options?: IDropdownOption[];\r\n\r\n  /**\r\n   * Callback issues when the selected option changes\r\n   */\r\n  onChanged?: (option: IDropdownOption, index?: number) => void;\r\n\r\n  /**\r\n   * Optional custom renderer for selected option displayed in input\r\n   */\r\n  onRenderTitle?: IRenderFunction<IDropdownOption>;\r\n\r\n  /**\r\n    * Optional custom renderer for the dropdown container\r\n    */\r\n  onRenderContainer?: IRenderFunction<IDropdownProps>;\r\n\r\n  /**\r\n    * Optional custom renderer for the dropdown list\r\n    */\r\n  onRenderList?: IRenderFunction<IDropdownProps>;\r\n\r\n  /**\r\n   * Optional custom renderer for the dropdown options\r\n   */\r\n  onRenderItem?: IRenderFunction<IDropdownOption>;\r\n\r\n  /**\r\n   * Optional custom renderer for the dropdown option content\r\n   */\r\n  onRenderOption?: IRenderFunction<IDropdownOption>;\r\n\r\n  /**\r\n   * Whether or not the Dropdown is disabled.\r\n   */\r\n  disabled?: boolean;\r\n\r\n  /**\r\n   * Whether or not the Dropdown is required.\r\n   */\r\n  required?: boolean;\r\n\r\n  /**\r\n   * Deprecated at v0.52.0, use 'disabled' instead.\r\n   * @deprecated\r\n   */\r\n  isDisabled?: boolean;\r\n\r\n  /**\r\n   * Descriptive label for the Dropdown Error Message\r\n   */\r\n  errorMessage?: string;\r\n}\r\n\r\nexport interface IDropdownOption {\r\n  /**\r\n   * Arbitrary string associated with this option.\r\n   */\r\n  key: string | number;\r\n\r\n  /**\r\n   * Text to render for this option\r\n   */\r\n  text: string;\r\n\r\n  /**\r\n   * Text to render for this option\r\n   */\r\n  itemType?: DropdownMenuItemType;\r\n\r\n  /**\r\n   * Index for this option\r\n   */\r\n  index?: number;\r\n\r\n  /** If option is selected. */\r\n  selected?: boolean;\r\n\r\n  /**\r\n   * Deprecated at v.65.1, use 'selected' instead.\r\n   * @deprecated\r\n   */\r\n  isSelected?: boolean;\r\n}\r\n"],"sourceRoot":"..\\..\\..\\src"}