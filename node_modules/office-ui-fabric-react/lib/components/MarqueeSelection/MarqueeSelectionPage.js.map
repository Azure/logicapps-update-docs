{"version":3,"sources":["components/MarqueeSelection/MarqueeSelectionPage.tsx"],"names":[],"mappings":";;;;;;;;;;;;AAAA,6BAA+B;AAC/B,+DAIoC;AAEpC,4FAAyF;AAEzF,IAAM,gCAAgC,GAAG,OAAO,CAAC,gHAAgH,CAAW,CAAC;AAE7K;IAA0C,wCAA6C;IAAvF;;IAkCA,CAAC;IAjCQ,qCAAM,GAAb;QACE,MAAM,CAAC,CACL,oBAAC,gCAAa,IACZ,KAAK,EAAC,kBAAkB,EACxB,aAAa,EAAC,yBAAyB,EACvC,YAAY,EACV,oBAAC,8BAAW,IAAC,KAAK,EAAC,yBAAyB,EAAC,IAAI,EAAG,gCAAgC;gBAClF,oBAAC,6DAA4B,OAAG,CACpB,EAEhB,QAAQ,EACN;gBACE,oUAGI;gBACJ,yMAEI;gBACJ;;oBACuE,sDAA2B;wMAC9F;gBACJ,gPAGI,CACA,EAER,eAAe,EAAG,IAAI,CAAC,KAAK,CAAC,eAAe,GAC9B,CACjB,CAAC;IACJ,CAAC;IAEH,2BAAC;AAAD,CAlCA,AAkCC,CAlCyC,KAAK,CAAC,SAAS,GAkCxD;AAlCY,oDAAoB","file":"components/MarqueeSelection/MarqueeSelectionPage.js","sourcesContent":["import * as React from 'react';\r\nimport {\r\n  ExampleCard,\r\n  ComponentPage,\r\n  IComponentDemoPageProps\r\n} from '@uifabric/example-app-base';\r\n\r\nimport { MarqueeSelectionBasicExample } from './examples/MarqueeSelection.Basic.Example';\r\n\r\nconst MarqueeSelectionBasicExampleCode = require('!raw-loader!office-ui-fabric-react/src/components/MarqueeSelection/examples/MarqueeSelection.Basic.Example.tsx') as string;\r\n\r\nexport class MarqueeSelectionPage extends React.Component<IComponentDemoPageProps, any> {\r\n  public render() {\r\n    return (\r\n      <ComponentPage\r\n        title='MarqueeSelection'\r\n        componentName='MarqueeSelectionExample'\r\n        exampleCards={\r\n          <ExampleCard title='Basic Selection Example' code={ MarqueeSelectionBasicExampleCode }>\r\n            <MarqueeSelectionBasicExample />\r\n          </ExampleCard>\r\n        }\r\n        overview={\r\n          <div>\r\n            <p>\r\n              The MarqueeSelection component provides a service which allows the user to drag a rectangle to be drawn around\r\n              items to select them. This works in conjunction with a selection object, which can be used to generically store selection state, separate from a component that consumes the state.\r\n            </p>\r\n            <p>\r\n              MarqueeSelection also works in conjunction with the AutoScroll utility to automatically scroll the container when we drag a rectangle within the vicinity of the edges.\r\n            </p>\r\n            <p>\r\n              When a selection rectangle is dragged, we look for elements with the <b>data-selection-index</b> attribute populated. We get these elements' boundingClientRects and compare them with the root's rect to determine selection state. We update the selection state appropriately.\r\n            </p>\r\n            <p>\r\n              In virtualization cases where items that were once selected are dematerialized, we will keep the item in its\r\n              previous state until we know definitively if it's on/off. (In other words, this works with List.)\r\n            </p>\r\n          </div>\r\n        }\r\n        isHeaderVisible={ this.props.isHeaderVisible }>\r\n      </ComponentPage>\r\n    );\r\n  }\r\n\r\n}"],"sourceRoot":"..\\..\\..\\src"}