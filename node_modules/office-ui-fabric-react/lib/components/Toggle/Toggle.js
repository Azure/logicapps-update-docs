"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var Utilities_1 = require("../../Utilities");
var Label_1 = require("../../Label");
var stylesImport = require("./Toggle.scss");
var styles = stylesImport;
var Toggle = (function (_super) {
    __extends(Toggle, _super);
    function Toggle(props) {
        var _this = _super.call(this) || this;
        _this._warnMutuallyExclusive({
            checked: 'defaultChecked'
        });
        _this.state = {
            isChecked: !!(props.checked || props.defaultChecked)
        };
        _this._id = props.id || Utilities_1.getId('Toggle');
        return _this;
    }
    Object.defineProperty(Toggle.prototype, "checked", {
        /**
         * Gets the current checked state of the toggle.
         */
        get: function () {
            return this.state.isChecked;
        },
        enumerable: true,
        configurable: true
    });
    Toggle.prototype.componentWillReceiveProps = function (newProps) {
        if (newProps.checked !== undefined) {
            this.setState({
                isChecked: newProps.checked
            });
        }
    };
    Toggle.prototype.render = function () {
        // This control is using an input element for more universal accessibility support.
        // Previously a button and the aria-pressed attribute were used. This technique works well with Narrator + Edge and NVDA + FireFox.
        // However, JAWS and VoiceOver did not announce anything when the toggle was checked or unchecked.
        // In the future when more screenreaders support aria-pressed it would be a good idea to change this control back to using it as it is
        // more semantically correct.
        var _this = this;
        var _a = this.props, label = _a.label, onAriaLabel = _a.onAriaLabel, offAriaLabel = _a.offAriaLabel, onText = _a.onText, offText = _a.offText, className = _a.className, disabled = _a.disabled;
        var isChecked = this.state.isChecked;
        var stateText = isChecked ? onText : offText;
        var ariaLabel = isChecked ? onAriaLabel : offAriaLabel;
        var toggleNativeProps = Utilities_1.getNativeProps(this.props, Utilities_1.inputProperties);
        return (React.createElement("div", { className: Utilities_1.css(styles.root, 'ms-Toggle', className, (_b = {
                    'is-checked': isChecked,
                    'is-enabled': !disabled,
                    'is-disabled': disabled
                },
                _b[styles.isChecked] = isChecked,
                _b[styles.isEnabled] = !disabled,
                _b[styles.isDisabled] = disabled,
                _b)) },
            React.createElement("div", { className: Utilities_1.css(styles.innerContainer, 'ms-Toggle-innerContainer') },
                label && (React.createElement(Label_1.Label, { className: 'ms-Toggle-label', htmlFor: this._id }, label)),
                React.createElement("div", { className: Utilities_1.css(styles.slider, 'ms-Toggle-slider') },
                    React.createElement("input", __assign({ key: 'invisibleToggle', ref: function (c) { return _this._toggleInput = c; }, type: 'checkbox', id: this._id }, toggleNativeProps, { className: styles.invisibleToggle, name: this._id, disabled: disabled, checked: isChecked, "aria-label": ariaLabel, onClick: this._onClick, onKeyDown: this._onInputKeyDown })),
                    React.createElement("div", { className: Utilities_1.css(styles.background, 'ms-Toggle-background') },
                        React.createElement("div", { className: Utilities_1.css(styles.focus, 'ms-Toggle-focus') }),
                        React.createElement("div", { className: Utilities_1.css(styles.thumb, 'ms-Toggle-thumb') })),
                    stateText && (React.createElement(Label_1.Label, { className: Utilities_1.css(styles.stateText, 'ms-Toggle-stateText') }, stateText))))));
        var _b;
    };
    Toggle.prototype.focus = function () {
        if (this._toggleInput) {
            this._toggleInput.focus();
        }
    };
    Toggle.prototype._onClick = function () {
        var _a = this.props, checked = _a.checked, onChanged = _a.onChanged;
        var isChecked = this.state.isChecked;
        // Only update the state if the user hasn't provided it.
        if (checked === undefined) {
            this.setState({
                isChecked: !isChecked
            });
        }
        if (onChanged) {
            onChanged(!isChecked);
        }
    };
    Toggle.prototype._onInputKeyDown = function (ev) {
        switch (ev.which) {
            case Utilities_1.KeyCodes.enter:
                // Also support toggling via the enter key.
                // While toggling via the space bar is technically correct for a checkbox, this control looks more like a button to sighted users.
                this._onClick();
                break;
        }
    };
    return Toggle;
}(Utilities_1.BaseComponent));
__decorate([
    Utilities_1.autobind
], Toggle.prototype, "_onClick", null);
__decorate([
    Utilities_1.autobind
], Toggle.prototype, "_onInputKeyDown", null);
exports.Toggle = Toggle;

//# sourceMappingURL=Toggle.js.map
