{"version":3,"sources":["components/Toggle/Toggle.tsx"],"names":[],"mappings":"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","file":"components/Toggle/Toggle.js","sourcesContent":["import * as React from 'react';\r\nimport {\r\n  BaseComponent,\r\n  KeyCodes,\r\n  autobind,\r\n  css,\r\n  getId,\r\n  inputProperties,\r\n  getNativeProps\r\n} from '../../Utilities';\r\nimport { IToggleProps, IToggle } from './Toggle.Props';\r\nimport { Label } from '../../Label';\r\nimport * as stylesImport from './Toggle.scss';\r\nconst styles: any = stylesImport;\r\n\r\nexport interface IToggleState {\r\n  isChecked: boolean;\r\n}\r\n\r\nexport class Toggle extends BaseComponent<IToggleProps, IToggleState> implements IToggle {\r\n\r\n  private _id: string;\r\n  private _toggleInput: HTMLInputElement;\r\n\r\n  constructor(props: IToggleProps) {\r\n    super();\r\n\r\n    this._warnMutuallyExclusive({\r\n      checked: 'defaultChecked'\r\n    });\r\n\r\n    this.state = {\r\n      isChecked: !!(props.checked || props.defaultChecked)\r\n    };\r\n    this._id = props.id || getId('Toggle');\r\n  }\r\n\r\n  /**\r\n   * Gets the current checked state of the toggle.\r\n   */\r\n  public get checked(): boolean {\r\n    return this.state.isChecked;\r\n  }\r\n\r\n  public componentWillReceiveProps(newProps: IToggleProps) {\r\n    if (newProps.checked !== undefined) {\r\n      this.setState({\r\n        isChecked: newProps.checked\r\n      });\r\n    }\r\n  }\r\n\r\n  public render() {\r\n    // This control is using an input element for more universal accessibility support.\r\n    // Previously a button and the aria-pressed attribute were used. This technique works well with Narrator + Edge and NVDA + FireFox.\r\n    // However, JAWS and VoiceOver did not announce anything when the toggle was checked or unchecked.\r\n    // In the future when more screenreaders support aria-pressed it would be a good idea to change this control back to using it as it is\r\n    // more semantically correct.\r\n\r\n    let { label, onAriaLabel, offAriaLabel, onText, offText, className, disabled } = this.props;\r\n    let { isChecked } = this.state;\r\n    let stateText = isChecked ? onText : offText;\r\n    const ariaLabel = isChecked ? onAriaLabel : offAriaLabel;\r\n    const toggleNativeProps = getNativeProps(this.props, inputProperties);\r\n    return (\r\n      <div className={\r\n        css(\r\n          styles.root,\r\n          'ms-Toggle',\r\n          className,\r\n          {\r\n            'is-checked': isChecked,\r\n            'is-enabled': !disabled,\r\n            'is-disabled': disabled,\r\n            [styles.isChecked]: isChecked,\r\n            [styles.isEnabled]: !disabled,\r\n            [styles.isDisabled]: disabled,\r\n          }\r\n        ) }>\r\n        <div className={ css(styles.innerContainer, 'ms-Toggle-innerContainer') }>\r\n          { label && (\r\n            <Label className='ms-Toggle-label' htmlFor={ this._id }>{ label }</Label>\r\n          ) }\r\n          <div className={ css(styles.slider, 'ms-Toggle-slider') }>\r\n            <input\r\n              key='invisibleToggle'\r\n              ref={ (c): HTMLInputElement => this._toggleInput = c }\r\n              type='checkbox'\r\n              id={ this._id }\r\n              { ...toggleNativeProps }\r\n              className={ styles.invisibleToggle }\r\n              name={ this._id }\r\n              disabled={ disabled }\r\n              checked={ isChecked }\r\n              aria-label={ ariaLabel }\r\n              onClick={ this._onClick }\r\n              onKeyDown={ this._onInputKeyDown }\r\n            />\r\n            <div className={ css(styles.background, 'ms-Toggle-background') }>\r\n              <div className={ css(styles.focus, 'ms-Toggle-focus') } />\r\n              <div className={ css(styles.thumb, 'ms-Toggle-thumb') } />\r\n            </div>\r\n            { stateText && (\r\n              <Label className={ css(styles.stateText, 'ms-Toggle-stateText') }>{ stateText }</Label>\r\n            ) }\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  public focus() {\r\n    if (this._toggleInput) {\r\n      this._toggleInput.focus();\r\n    }\r\n  }\r\n\r\n  @autobind\r\n  private _onClick() {\r\n    let { checked, onChanged } = this.props;\r\n    let { isChecked } = this.state;\r\n\r\n    // Only update the state if the user hasn't provided it.\r\n    if (checked === undefined) {\r\n      this.setState({\r\n        isChecked: !isChecked\r\n      });\r\n    }\r\n\r\n    if (onChanged) {\r\n      onChanged(!isChecked);\r\n    }\r\n  }\r\n\r\n  @autobind\r\n  private _onInputKeyDown(ev: React.KeyboardEvent<HTMLElement>) {\r\n    switch (ev.which) {\r\n      case KeyCodes.enter:\r\n        // Also support toggling via the enter key.\r\n        // While toggling via the space bar is technically correct for a checkbox, this control looks more like a button to sighted users.\r\n        this._onClick();\r\n\r\n        break;\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\..\\src"}