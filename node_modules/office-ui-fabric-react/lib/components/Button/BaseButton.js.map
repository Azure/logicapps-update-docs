{"version":3,"sources":["components/Button/BaseButton.tsx"],"names":[],"mappings":"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","file":"components/Button/BaseButton.js","sourcesContent":["import * as React from 'react';\r\nimport {\r\n  BaseComponent,\r\n  css,\r\n  assign,\r\n  getId,\r\n  getNativeProps,\r\n  buttonProperties,\r\n  anchorProperties\r\n} from '../../Utilities';\r\nimport { IButtonProps, IButton } from './Button.Props';\r\nimport styles from './BaseButton.scss';\r\n\r\nexport interface IBaseButtonClassNames {\r\n  base: string;\r\n  variant: string;\r\n  isDisabled: string;\r\n  isEnabled: string;\r\n  description?: string;\r\n  flexContainer?: string;\r\n  icon?: string;\r\n  label?: string;\r\n  root?: string;\r\n}\r\n\r\nexport class BaseButton extends BaseComponent<IButtonProps, {}> implements IButton {\r\n\r\n  protected classNames: IBaseButtonClassNames = {\r\n    base: 'ms-Button',\r\n    variant: '',\r\n    isEnabled: '',\r\n    isDisabled: ''\r\n  };\r\n\r\n  private _buttonElement: HTMLButtonElement;\r\n  private _labelId: string;\r\n  private _descriptionId: string;\r\n  private _ariaDescriptionId: string;\r\n\r\n  constructor(props: IButtonProps, rootClassName: string, deprecationMap: any) {\r\n    super(props, { 'rootProps': null });\r\n    this._labelId = getId();\r\n    this._descriptionId = getId();\r\n    this._ariaDescriptionId = getId();\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    const { description, ariaLabel, ariaDescription, href, disabled } = this.props;\r\n    const { _ariaDescriptionId, _labelId, _descriptionId } = this;\r\n    const renderAsAnchor: boolean = !!href;\r\n    const tag = renderAsAnchor ? 'a' : 'button';\r\n    const nativeProps = getNativeProps(\r\n      assign({}, this.props.rootProps, this.props),\r\n      renderAsAnchor ? anchorProperties : buttonProperties,\r\n      [\r\n        'disabled' // Let disabled buttons be focused and styled as disabled.\r\n      ]);\r\n\r\n    // Check for ariaDescription, description or aria-describedby in the native props to determine source of aria-describedby\r\n    // otherwise default to null.\r\n    let ariaDescribedBy;\r\n\r\n    if (ariaDescription) {\r\n      ariaDescribedBy = _ariaDescriptionId;\r\n    } else if (description) {\r\n      ariaDescribedBy = _descriptionId;\r\n    } else if (nativeProps['aria-describedby']) {\r\n      ariaDescribedBy = nativeProps['aria-describedby'];\r\n    } else {\r\n      ariaDescribedBy = null;\r\n    }\r\n\r\n    let buttonProps = assign(\r\n      nativeProps,\r\n      {\r\n        className: css(\r\n          styles.root,\r\n          this.props.className,\r\n          this.classNames.base,\r\n          this.classNames.variant,\r\n          this.classNames.root,\r\n          {\r\n            'disabled': disabled,\r\n            [this.classNames.isDisabled]: disabled,\r\n            [this.classNames.isEnabled]: !disabled\r\n          }),\r\n        ref: this._resolveRef('_buttonElement'),\r\n        'disabled': disabled,\r\n        'aria-label': ariaLabel,\r\n        'aria-labelledby': ariaLabel ? null : _labelId,\r\n        'aria-describedby': ariaDescribedBy,\r\n        'aria-disabled': disabled\r\n      }\r\n    );\r\n\r\n    return this.onRenderContent(tag, buttonProps);\r\n  }\r\n\r\n  public focus(): void {\r\n    if (this._buttonElement) {\r\n      this._buttonElement.focus();\r\n    }\r\n  }\r\n\r\n  protected onRenderContent(tag: any, buttonProps: IButtonProps): JSX.Element {\r\n    return React.createElement(\r\n      tag,\r\n      buttonProps,\r\n      React.createElement('div', { className: css(this.classNames.base + '-flexContainer', styles.flexContainer, this.classNames.flexContainer) },\r\n        this.onRenderIcon(),\r\n        this.onRenderLabel(),\r\n        this.onRenderDescription(),\r\n        this.onRenderAriaDescription(),\r\n        this.onRenderChildren()\r\n      ));\r\n  }\r\n\r\n  protected onRenderIcon() {\r\n    let { icon } = this.props;\r\n\r\n    return icon ? (\r\n      <span className={ css(`${this.classNames.base}-icon`, this.classNames.icon) }>\r\n        <i className={ `ms-Icon ms-Icon--${icon}` } />\r\n      </span>\r\n    ) : (\r\n        null\r\n      );\r\n  }\r\n\r\n  protected onRenderLabel() {\r\n    let { children, text } = this.props;\r\n\r\n    // For backwards compat, we should continue to take in the text content from children.\r\n    if (text === undefined && typeof (children) === 'string') {\r\n      text = children;\r\n    }\r\n\r\n    return text && (\r\n      <span className={ css(`${this.classNames.base}-label`, this.classNames.label) } id={ this._labelId } >\r\n        { text }\r\n      </span>\r\n    );\r\n  }\r\n\r\n  protected onRenderChildren() {\r\n    let { children } = this.props;\r\n\r\n    // If children is just a string, either it or the text will be rendered via onRenderLabel\r\n    // If children is another component, it will be rendered after text\r\n    if (typeof (children) === 'string') {\r\n      return null;\r\n    }\r\n\r\n    return children;\r\n  }\r\n\r\n  protected onRenderDescription() {\r\n    let { description } = this.props;\r\n\r\n    // ms-Button-description is only shown when the button type is compound.\r\n    // In other cases it will not be displayed.\r\n    return description ? (\r\n      <span\r\n        className={ css(`${this.classNames.base}-description`, this.classNames.description) }\r\n        id={ this._descriptionId }\r\n      >\r\n        { description }\r\n      </span>\r\n    ) : (\r\n        null\r\n      );\r\n  }\r\n\r\n  protected onRenderAriaDescription() {\r\n    let { ariaDescription } = this.props;\r\n\r\n    // If ariaDescription is given, descriptionId will be assigned to ariaDescriptionSpan,\r\n    // otherwise it will be assigned to descriptionSpan.\r\n    return ariaDescription ? (\r\n      <span className={ styles.screenReaderOnly } id={ this._ariaDescriptionId }>{ ariaDescription }</span>\r\n    ) : (\r\n        null\r\n      );\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\..\\src"}