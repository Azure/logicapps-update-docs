{"version":3,"sources":["components/Facepile/examples/Facepile.Overflow.Example.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,6BAA+B;AAC/B,gEAI6C;AAC7C,gEAA+D;AAC/D,4DAA2D;AAC3D,6DAAyD;AACzD,oCAAkC;AAElC,IAAM,aAAa,GAAmB;IACpC,QAAQ,EAAE,sCAAgB;IAC1B,sBAAsB,EAAE,CAAC;IACzB,kBAAkB,EAAE,6BAAkB,CAAC,SAAS;IAChD,mBAAmB,EAAE;QACnB,SAAS,EAAE,YAAY;QACvB,OAAO,EAAE,UAAC,EAAuC;YAC/C,OAAA,KAAK,CAAC,uBAAuB,CAAC;QAA9B,CAA8B;KACjC;IACD,eAAe,EAAE,0DAA0D;CAC5E,CAAC;AAOF;IAA6C,2CAAmD;IAC9F;QAAA,YACE,iBAAO,SAMR;QAJC,KAAI,CAAC,KAAK,GAAG;YACX,iBAAiB,EAAE,CAAC;YACpB,kBAAkB,EAAE,6BAAkB,CAAC,IAAI;SAC5C,CAAC;;IACJ,CAAC;IAEM,wCAAM,GAAb;QAAA,iBAwCC;QAvCK,IAAA,eAAsD,EAApD,wCAAiB,EAAE,0CAAkB,CAAgB;QAC3D,aAAa,CAAC,sBAAsB,GAAG,iBAAiB,CAAC;QACzD,aAAa,CAAC,kBAAkB,GAAG,kBAAkB,CAAC;QAEtD,MAAM,CAAC,CACL,6BAAK,SAAS,EAAG,oBAAoB;YACnC,oBAAC,mBAAQ,eAAK,aAAa,EAAI;YAC/B,6BAAK,SAAS,EAAG,SAAS;gBACxB,oBAAC,eAAM,IACL,KAAK,EAAC,2BAA2B,EACjC,GAAG,EAAG,CAAC,EACP,GAAG,EAAG,CAAC,EACP,IAAI,EAAG,CAAC,EACR,SAAS,EAAG,IAAI,EAChB,KAAK,EAAG,IAAI,CAAC,KAAK,CAAC,iBAAiB,EACpC,QAAQ,EAAG,UAAA,KAAK,IAAI,OAAA,KAAI,CAAC,QAAQ,CAAC,UAAC,SAAwC;wBACzE,SAAS,CAAC,iBAAiB,GAAG,KAAK,CAAC;wBACpC,MAAM,CAAC,SAAS,CAAC;oBACnB,CAAC,CAAC,EAHkB,CAGlB,GACF,CACE;YACN,oBAAC,mBAAQ,IACP,KAAK,EAAC,gBAAgB,EACtB,WAAW,EAAG,IAAI,CAAC,KAAK,CAAC,kBAAkB,EAC3C,OAAO,EACL;oBACE,EAAE,GAAG,EAAE,6BAAkB,CAAC,IAAI,EAAE,IAAI,EAAE,6BAAkB,CAAC,6BAAkB,CAAC,IAAI,CAAC,EAAE;oBACnF,EAAE,GAAG,EAAE,6BAAkB,CAAC,WAAW,EAAE,IAAI,EAAE,6BAAkB,CAAC,6BAAkB,CAAC,WAAW,CAAC,EAAE;oBACjG,EAAE,GAAG,EAAE,6BAAkB,CAAC,SAAS,EAAE,IAAI,EAAE,6BAAkB,CAAC,6BAAkB,CAAC,SAAS,CAAC,EAAE;oBAC7F,EAAE,GAAG,EAAE,6BAAkB,CAAC,IAAI,EAAE,IAAI,EAAE,6BAAkB,CAAC,6BAAkB,CAAC,IAAI,CAAC,EAAE;iBACpF,EAEH,SAAS,EAAG,UAAA,KAAK,IAAI,OAAA,KAAI,CAAC,QAAQ,CAAC,UAAC,SAAwC;oBAC1E,SAAS,CAAC,kBAAkB,GAAG,KAAK,CAAC,GAAyB,CAAC;oBAC/D,MAAM,CAAC,SAAS,CAAC;gBACnB,CAAC,CAAC,EAHmB,CAGnB,GACF,CACE,CACP,CAAC;IACJ,CAAC;IACH,8BAAC;AAAD,CAnDA,AAmDC,CAnD4C,KAAK,CAAC,SAAS,GAmD3D;AAnDY,0DAAuB","file":"components/Facepile/examples/Facepile.Overflow.Example.js","sourcesContent":["import * as React from 'react';\r\nimport {\r\n  IFacepileProps,\r\n  Facepile,\r\n  OverflowButtonType,\r\n} from 'office-ui-fabric-react/lib/Facepile';\r\nimport { Dropdown } from 'office-ui-fabric-react/lib/Dropdown';\r\nimport { Slider } from 'office-ui-fabric-react/lib/Slider';\r\nimport { facepilePersonas } from './FacepileExampleData';\r\nimport './Facepile.Examples.scss';\r\n\r\nconst facepileProps: IFacepileProps = {\r\n  personas: facepilePersonas,\r\n  maxDisplayablePersonas: 5,\r\n  overflowButtonType: OverflowButtonType.downArrow,\r\n  overflowButtonProps: {\r\n    ariaLabel: 'More users',\r\n    onClick: (ev: React.MouseEvent<HTMLButtonElement>) =>\r\n      alert('overflow icon clicked')\r\n  },\r\n  ariaDescription: 'To move through the items use left and right arrow keys.'\r\n};\r\n\r\nexport interface IFacepileOverflowExampleState {\r\n  displayedPersonas: any;\r\n  overflowButtonType: OverflowButtonType;\r\n}\r\n\r\nexport class FacepileOverflowExample extends React.Component<any, IFacepileOverflowExampleState> {\r\n  public constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      displayedPersonas: 5,\r\n      overflowButtonType: OverflowButtonType.none\r\n    };\r\n  }\r\n\r\n  public render() {\r\n    let { displayedPersonas, overflowButtonType } = this.state;\r\n    facepileProps.maxDisplayablePersonas = displayedPersonas;\r\n    facepileProps.overflowButtonType = overflowButtonType;\r\n\r\n    return (\r\n      <div className={ 'ms-FacepileExample' }>\r\n        <Facepile {...facepileProps} />\r\n        <div className={ 'control' }>\r\n          <Slider\r\n            label='Number of Personas Shown:'\r\n            min={ 0 }\r\n            max={ 6 }\r\n            step={ 1 }\r\n            showValue={ true }\r\n            value={ this.state.displayedPersonas }\r\n            onChange={ value => this.setState((prevState: IFacepileOverflowExampleState) => {\r\n              prevState.displayedPersonas = value;\r\n              return prevState;\r\n            }) }\r\n          />\r\n        </div>\r\n        <Dropdown\r\n          label='Overflow Type:'\r\n          selectedKey={ this.state.overflowButtonType }\r\n          options={\r\n            [\r\n              { key: OverflowButtonType.none, text: OverflowButtonType[OverflowButtonType.none] },\r\n              { key: OverflowButtonType.descriptive, text: OverflowButtonType[OverflowButtonType.descriptive] },\r\n              { key: OverflowButtonType.downArrow, text: OverflowButtonType[OverflowButtonType.downArrow] },\r\n              { key: OverflowButtonType.more, text: OverflowButtonType[OverflowButtonType.more] },\r\n            ]\r\n          }\r\n          onChanged={ value => this.setState((prevState: IFacepileOverflowExampleState) => {\r\n            prevState.overflowButtonType = value.key as OverflowButtonType;\r\n            return prevState;\r\n          }) }\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}"],"sourceRoot":"..\\..\\..\\..\\src"}