{"version":3,"sources":["components/ProgressIndicator/ProgressIndicator.tsx"],"names":[],"mappings":";;;;;;;;;;;;;IAUA,IAAM,MAAM,GAAQ,YAAY,CAAC;IAEjC,sDAAsD;IACtD,mDAAmD;IACnD,IAAM,cAAc,GAAG,IAAI,CAAC;IAE5B;QAAuC,qCAA0C;QAQ/E,2BAAY,KAA8B;YAA1C,YACE,kBAAM,KAAK,CAAC,SAMb;YAJC,KAAI,CAAC,iBAAiB,CAAC;gBACrB,KAAK,EAAE,OAAO;aACf,CAAC,CAAC;;QAEL,CAAC;QAEM,kCAAM,GAAb;YACM,IAAA,eAAqF,EAAnF,gBAAK,EAAE,gBAAK,EAAE,4BAAW,EAAE,oCAAe,EAAE,wBAAS,EAAE,gCAAa,CAAgB;YAE1F,2BAA2B;YAC3B,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gBACV,KAAK,GAAG,KAAK,CAAC;YAChB,CAAC;YAED,eAAe,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,eAAe,GAAG,GAAG,CAAC,CAAC,CAAC;YAEpE,MAAM,CAAC,CACL,6BAAK,SAAS,EAAG,eAAG,CAAC,sBAAsB,EAAE,MAAM,CAAC,IAAI,EAAE,SAAS,CAAC;gBAClE,6BAAK,SAAS,EAAG,eAAG,CAAC,+BAA+B,EAAE,MAAM,CAAC,QAAQ,CAAC,IAAK,KAAK,CAAQ;gBACxF,6BAAK,SAAS,EAAG,eAAG,CAAC,mCAAmC,EAAE,MAAM,CAAC,YAAY,CAAC;oBAC5E,6BAAK,SAAS,EAAG,eAAG,CAAC,oCAAoC,EAAE,MAAM,CAAC,aAAa,CAAC,GAAS;oBACzF,6BAAK,SAAS,EAAG,eAAG,CAAC,kCAAkC,EAAE,MAAM,CAAC,WAAW,EAAE;4BAC3E,kBAAkB,EAAE,eAAe,GAAG,cAAc;yBACrD,CAAC,EACA,KAAK,EAAG,EAAE,KAAK,EAAE,eAAe,GAAG,GAAG,EAAE,EACxC,IAAI,EAAC,aAAa,mBACJ,GAAG,mBACH,KAAK,mBACH,eAAe,CAAC,OAAO,EAAE,CAAC,QAAQ,EAAE,oBACnC,aAAa,GAC1B,CACF;gBACN,6BAAK,SAAS,EAAG,eAAG,CAAC,sCAAsC,EAAE,MAAM,CAAC,eAAe,CAAC,IAAK,WAAW,CAAQ,CACxG,CACP,CAAC;QACJ,CAAC;QACH,wBAAC;IAAD,CA/CA,AA+CC,CA/CsC,yBAAa;IACpC,8BAAY,GAAG;QAC3B,KAAK,EAAE,EAAE;QACT,WAAW,EAAE,EAAE;QACf,eAAe,EAAE,CAAC;QAClB,KAAK,EAAE,GAAG;KACX,CAAC;IANS,8CAAiB","file":"components/ProgressIndicator/ProgressIndicator.js","sourcesContent":["/* tslint:disable:no-unused-variable */\r\nimport * as React from 'react';\r\n/* tslint:enable:no-unused-variable */\r\n\r\nimport {\r\n  BaseComponent,\r\n  css\r\n} from '../../Utilities';\r\nimport { IProgressIndicatorProps } from './ProgressIndicator.Props';\r\nimport * as stylesImport from './ProgressIndicator.scss';\r\nconst styles: any = stylesImport;\r\n\r\n// if the percentComplete is near 0, don't animate it.\r\n// This prevents animations on reset to 0 scenarios\r\nconst ZERO_THRESHOLD = 0.01;\r\n\r\nexport class ProgressIndicator extends BaseComponent<IProgressIndicatorProps, {}> {\r\n  public static defaultProps = {\r\n    label: '',\r\n    description: '',\r\n    percentComplete: 0,\r\n    width: 180\r\n  };\r\n\r\n  constructor(props: IProgressIndicatorProps) {\r\n    super(props);\r\n\r\n    this._warnDeprecations({\r\n      title: 'label'\r\n    });\r\n\r\n  }\r\n\r\n  public render() {\r\n    let { title, label, description, percentComplete, className, ariaValueText } = this.props;\r\n\r\n    // Handle deprecated value.\r\n    if (title) {\r\n      label = title;\r\n    }\r\n\r\n    percentComplete = Math.min(100, Math.max(0, percentComplete * 100));\r\n\r\n    return (\r\n      <div className={ css('ms-ProgressIndicator', styles.root, className) }>\r\n        <div className={ css('ms-ProgressIndicator-itemName', styles.itemName) }>{ label }</div>\r\n        <div className={ css('ms-ProgressIndicator-itemProgress', styles.itemProgress) }>\r\n          <div className={ css('ms-ProgressIndicator-progressTrack', styles.progressTrack) }></div>\r\n          <div className={ css('ms-ProgressIndicator-progressBar', styles.progressBar, {\r\n            'smoothTransition': percentComplete > ZERO_THRESHOLD\r\n          }) }\r\n            style={ { width: percentComplete + '%' } }\r\n            role='progressbar'\r\n            aria-valuemin='0'\r\n            aria-valuemax='100'\r\n            aria-valuenow={ percentComplete.toFixed().toString() }\r\n            aria-valuetext={ ariaValueText }>\r\n          </div>\r\n        </div>\r\n        <div className={ css('ms-ProgressIndicator-itemDescription', styles.itemDescription) }>{ description }</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\..\\src"}