{"version":3,"sources":["components/Facepile/FacepilePage.tsx"],"names":[],"mappings":";;;;;;;;;;;;;IAWA,IAAM,0BAA0B,GAAG,OAAO,CAAC,kGAAkG,CAAW,CAAC;IACzJ,IAAM,wBAAwB,GAAG,OAAO,CAAC,gGAAgG,CAAW,CAAC;IACrJ,IAAM,2BAA2B,GAAG,OAAO,CAAC,mGAAmG,CAAW,CAAC;IAE3J;QAAkC,gCAA4C;QAA9E;;QAyFA,CAAC;QAxFQ,6BAAM,GAAb;YACE,MAAM,CAAC,CACL,oBAAC,gCAAa,IACZ,KAAK,EAAC,UAAU,EAChB,aAAa,EAAC,iBAAiB,EAC/B,YAAY,EACV;oBACE,oBAAC,8BAAW,IAAC,KAAK,EAAC,sBAAsB,EAAC,IAAI,EAAG,wBAAwB;wBACvE,oBAAC,6CAAoB,OAAG,CACZ;oBACd,oBAAC,8BAAW,IAAC,KAAK,EAAC,wBAAwB,EAAC,IAAI,EAAG,2BAA2B;wBAC5E,oBAAC,mDAAuB,OAAG,CACf;oBACd,oBAAC,8BAAW,IAAC,KAAK,EAAC,wBAAwB,EAAC,IAAI,EAAG,0BAA0B;wBAC3E,oBAAC,iDAAsB,OAAG,CACd,CACV,EAER,gBAAgB,EACd,oBAAC,qCAAkB,IACjB,OAAO,EAAG;wBACR,OAAO,CAAS,8EAA8E,CAAC;qBAChG,GACD,EAEJ,QAAQ,EACN;oBACE,wRAEI;oBAEJ,4BAAI,SAAS,EAAC,YAAY,oBAAmB;oBAC7C,oIAEI;oBAEJ,4BAAI,SAAS,EAAC,YAAY,kBAAiB;oBAC3C,8RAEI;oBAEJ,4BAAI,SAAS,EAAC,YAAY,iBAAgB;oBAC1C,wIAEI;oBAEJ,4BAAI,SAAS,EAAC,YAAY,mDAAkD;oBAE5E,6NAEI;oBAEJ,4BAAI,SAAS,EAAC,YAAY,eAAc;oBAExC,oPAEI,CAEA,EAER,aAAa,EACX,gCAAW,EAEb,GAAG,EACD;oBACE;wBACE,oJAA0H;wBAC1H,0FAAgE;wBAChE,qMAA2K,CACxK,CACD,EAER,KAAK,EACH;oBACE;wBACE,oEAA0C;wBAC1C,kJAAwH;wBACxH,8KAA+I,CAC5I,CACD,EAER,OAAO,EACL,2BAAG,IAAI,EAAC,oEAAoE,gBAAc,EAE5F,eAAe,EAAG,IAAI,CAAC,KAAK,CAAC,eAAe,GAC9B,CACjB,CAAC;QACJ,CAAC;QACH,mBAAC;IAAD,CAzFA,AAyFC,CAzFiC,KAAK,CAAC,SAAS,GAyFhD;IAzFY,oCAAY","file":"components/Facepile/FacepilePage.js","sourcesContent":["import * as React from 'react';\r\nimport {\r\n  ExampleCard,\r\n  IComponentDemoPageProps,\r\n  ComponentPage,\r\n  PropertiesTableSet\r\n} from '@uifabric/example-app-base';\r\nimport { FacepileAddFaceExample } from './examples/Facepile.AddFace.Example';\r\nimport { FacepileBasicExample } from './examples/Facepile.Basic.Example';\r\nimport { FacepileOverflowExample } from './examples/Facepile.Overflow.Example';\r\n\r\nconst FacepileAddFaceExampleCode = require('!raw-loader!office-ui-fabric-react/src/components/Facepile/examples/Facepile.AddFace.Example.tsx') as string;\r\nconst FacepileBasicExampleCode = require('!raw-loader!office-ui-fabric-react/src/components/Facepile/examples/Facepile.Basic.Example.tsx') as string;\r\nconst FacepileOverflowExampleCode = require('!raw-loader!office-ui-fabric-react/src/components/Facepile/examples/Facepile.Overflow.Example.tsx') as string;\r\n\r\nexport class FacepilePage extends React.Component<IComponentDemoPageProps, {}> {\r\n  public render() {\r\n    return (\r\n      <ComponentPage\r\n        title='Facepile'\r\n        componentName='FacepileExample'\r\n        exampleCards={\r\n          <div>\r\n            <ExampleCard title='Facepile with Extras' code={ FacepileBasicExampleCode }>\r\n              <FacepileBasicExample />\r\n            </ExampleCard>\r\n            <ExampleCard title='Facepile with Overflow' code={ FacepileOverflowExampleCode }>\r\n              <FacepileOverflowExample />\r\n            </ExampleCard>\r\n            <ExampleCard title='Facepile with Add Face' code={ FacepileAddFaceExampleCode }>\r\n              <FacepileAddFaceExample />\r\n            </ExampleCard>\r\n          </div>\r\n        }\r\n        propertiesTables={\r\n          <PropertiesTableSet\r\n            sources={ [\r\n              require<string>('!raw-loader!office-ui-fabric-react/src/components/Facepile/Facepile.Props.ts')\r\n            ] }\r\n          />\r\n        }\r\n        overview={\r\n          <div>\r\n            <p>\r\n              The Facepile shows a list of faces or initials in a horizontal lockup. Each circle represents a person. Many times this component is used when sharing who has access to a specific view or file or when assigning a user to a task within a workflow.\r\n            </p>\r\n\r\n            <h2 className='ms-font-xl'>Adding people</h2>\r\n            <p>\r\n              The component can include an add button which can be used for quickly adding a person to the list.\r\n            </p>\r\n\r\n            <h2 className='ms-font-xl'>Empty state</h2>\r\n            <p>\r\n              The empty state of the Facepile should include only an add button. Another variant is to use an input field with placeholder text instructing the user to add a person. See the PeoplePicker component for the menu used to add people to the Facepile list.\r\n            </p>\r\n\r\n            <h2 className='ms-font-xl'>One person</h2>\r\n            <p>\r\n              When there is only one person in the Facepile, consider using their name next to the face or initials.\r\n            </p>\r\n\r\n            <h2 className='ms-font-xl'>Expanding the list when there is no overflow</h2>\r\n\r\n            <p>\r\n              When there is a need to show the Facepile expanded into a vertical list, include a downward chevron button. Clicking or tapping on the chevron would open a standard list view of personas.\r\n            </p>\r\n\r\n            <h2 className='ms-font-xl'>Overflow</h2>\r\n\r\n            <p>\r\n              When the Facepile exceeds a max number of 5 people, show a button at the end of the list indicating how many are not being shown. Clicking or tapping on the overflow would open a standard list view of personas.\r\n            </p>\r\n\r\n          </div>\r\n        }\r\n        bestPractices={\r\n          <div></div>\r\n        }\r\n        dos={\r\n          <div>\r\n            <ul>\r\n              <li>Use if looking for a way to represent who has access to an area and need to show that as a people representation.</li>\r\n              <li>Only show the Add button if a user has access to do so.</li>\r\n              <li>Allow a way for the user to understand who the person is. Many common ways to do this are with a tooltip or adding the ability to open up a PeopleCard Experience.</li>\r\n            </ul>\r\n          </div>\r\n        }\r\n        donts={\r\n          <div>\r\n            <ul>\r\n              <li>Use for things other than people.</li>\r\n              <li>Overwhelm users by listing every single person as a circle but truncate and provide a way to see the full list.</li>\r\n              <li>Donâ€™t use this control for experiences where you need to manage details of hundreds of users, you are better off using a list control.</li>\r\n            </ul>\r\n          </div>\r\n        }\r\n        related={\r\n          <a href='https://dev.office.com/fabric-js/Components/FacePile/FacePile.html'>Fabric JS</a>\r\n        }\r\n        isHeaderVisible={ this.props.isHeaderVisible }>\r\n      </ComponentPage>\r\n    );\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\..\\src"}