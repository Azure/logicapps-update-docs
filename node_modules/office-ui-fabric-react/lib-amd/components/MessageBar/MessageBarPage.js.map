{"version":3,"sources":["components/MessageBar/MessageBarPage.tsx"],"names":[],"mappings":";;;;;;;;;;;;;IASA,IAAM,0BAA0B,GAAG,OAAO,CAAC,oGAAoG,CAAW,CAAC;IAE3J;QAAoC,kCAA4C;QAAhF;;QAyDA,CAAC;QAxDQ,+BAAM,GAAb;YACE,MAAM,CAAC,CACL,oBAAC,gCAAa,IACZ,KAAK,EAAC,YAAY,EAClB,aAAa,EAAC,mBAAmB,EACjC,YAAY,EACV,oBAAC,8BAAW,IACV,KAAK,EAAC,0BAA0B,EAChC,IAAI,EAAG,0BAA0B;oBACjC,oBAAC,iDAAsB,OAAG,CACd,EAEhB,gBAAgB,EACd,oBAAC,qCAAkB,IACjB,OAAO,EAAG;wBACR,OAAO,CAAS,kFAAkF,CAAC;qBACpG,GACD,EAEJ,QAAQ,EACN;oBACE,oSAEI,CACA,EAER,aAAa,EACX,gCAAW,EAEb,GAAG,EACD;oBACE;wBACE,yIAA+G;wBAC/G,mIAAyG;wBACzG,2KAAiJ;wBACjJ,0HAAgG,CAC7F,CACD,EAER,KAAK,EACH;oBACE;wBACE,4PAAwN;wBACxN,gSACK,CACF,CACD,EAER,OAAO,EACL,2BAAG,IAAI,EAAC,wEAAwE,gBAAc,EAEhG,eAAe,EAAG,IAAI,CAAC,KAAK,CAAC,eAAe,GAC9B,CACjB,CAAC;QACJ,CAAC;QAEH,qBAAC;IAAD,CAzDA,AAyDC,CAzDmC,KAAK,CAAC,SAAS,GAyDlD;IAzDY,wCAAc","file":"components/MessageBar/MessageBarPage.js","sourcesContent":["import * as React from 'react';\r\nimport {\r\n  ExampleCard,\r\n  IComponentDemoPageProps,\r\n  ComponentPage,\r\n  PropertiesTableSet\r\n} from '@uifabric/example-app-base';\r\nimport { MessageBarBasicExample } from './examples/MessageBar.Basic.Example';\r\n\r\nconst MessageBarBasicExampleCode = require('!raw-loader!office-ui-fabric-react/src/components/MessageBar/examples/MessageBar.Basic.Example.tsx') as string;\r\n\r\nexport class MessageBarPage extends React.Component<IComponentDemoPageProps, {}> {\r\n  public render() {\r\n    return (\r\n      <ComponentPage\r\n        title='MessageBar'\r\n        componentName='MessageBarExample'\r\n        exampleCards={\r\n          <ExampleCard\r\n            title='Various MessageBar types'\r\n            code={ MessageBarBasicExampleCode }>\r\n            <MessageBarBasicExample />\r\n          </ExampleCard>\r\n        }\r\n        propertiesTables={\r\n          <PropertiesTableSet\r\n            sources={ [\r\n              require<string>('!raw-loader!office-ui-fabric-react/src/components/MessageBar/MessageBar.Props.ts')\r\n            ] }\r\n          />\r\n        }\r\n        overview={\r\n          <div>\r\n            <p>\r\n              A MessageBar is an area at the top of a primary view that displays relevant status information. You can use a MessageBar to tell the user about a situation that does not require their immediate attention and therefore does not need to block other activities.\r\n            </p>\r\n          </div>\r\n        }\r\n        bestPractices={\r\n          <div></div>\r\n        }\r\n        dos={\r\n          <div>\r\n            <ul>\r\n              <li>Place the message bar near the top of the relevant view, in a highly visible but unobtrusive location.</li>\r\n              <li>Keep the text very brief. Be succinct and your users are more likely to read everything you say.</li>\r\n              <li>Consider how localization may affect the message. Translation to other languages may add up to 33% more characters to the string length.</li>\r\n              <li>Use the right variant for the type and urgency of the particular message (see variants)</li>\r\n            </ul>\r\n          </div>\r\n        }\r\n        donts={\r\n          <div>\r\n            <ul>\r\n              <li>Don’t use paragraphs, long sentences, or special formatting in a MessageBar. The control tries to grow to accommodate all the text and will just result in pushing the user’s main content too low on the view.</li>\r\n              <li>Don’t use buttons when a subtler link will suffice. Reserve the usage of button for when the MessageBar has a single ”hero” action that has vital usefulness to the user at that particular moment. Using more than one button is discouraged.\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        }\r\n        related={\r\n          <a href='https://dev.office.com/fabric-js/Components/MessageBar/MessageBar.html'>Fabric JS</a>\r\n        }\r\n        isHeaderVisible={ this.props.isHeaderVisible }>\r\n      </ComponentPage>\r\n    );\r\n  }\r\n\r\n}\r\n"],"sourceRoot":"..\\..\\..\\src"}