{"version":3,"sources":["components/Button/BaseButton.tsx"],"names":[],"mappings":"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","file":"components/Button/BaseButton.js","sourcesContent":["import * as React from 'react';\r\nimport {\r\n  BaseComponent,\r\n  IRenderFunction,\r\n  anchorProperties,\r\n  assign,\r\n  autobind,\r\n  buttonProperties,\r\n  css,\r\n  getId,\r\n  getNativeProps\r\n} from '../../Utilities';\r\nimport { Icon, IIconProps } from '../../Icon';\r\nimport { DirectionalHint } from '../../common/DirectionalHint';\r\nimport { ContextualMenu, IContextualMenuProps } from '../../ContextualMenu';\r\nimport { IButtonProps, IButton } from './Button.Props';\r\nimport * as stylesImport from './BaseButton.scss';\r\nconst styles: any = stylesImport;\r\n\r\nexport interface IButtonClassNames {\r\n  base?: string;\r\n  variant?: string;\r\n  isDisabled?: string;\r\n  isEnabled?: string;\r\n  description?: string;\r\n  flexContainer?: string;\r\n  icon?: string;\r\n  menuIcon?: string;\r\n  label?: string;\r\n  root?: string;\r\n}\r\n\r\n/**\r\n * These props are not in the Props file as they are undocumented props only specific to BaseButton.\r\n *\r\n * @export\r\n * @interface IBaseButtonProps\r\n * @extends {IButtonProps}\r\n */\r\nexport interface IBaseButtonProps extends IButtonProps {\r\n  /**\r\n   *  Custom class names for individual elements within the button DOM.\r\n   */\r\n  classNames?: IButtonClassNames;\r\n}\r\n\r\nexport interface IBaseButtonState {\r\n  menuProps?: IContextualMenuProps | null;\r\n}\r\n\r\nexport class BaseButton extends BaseComponent<IBaseButtonProps, IBaseButtonState> implements IButton {\r\n\r\n  public static defaultProps: IBaseButtonProps = {\r\n    classNames: {\r\n      base: 'ms-Button',\r\n      variant: '',\r\n      isEnabled: '',\r\n      isDisabled: ''\r\n    }\r\n  };\r\n\r\n  private _buttonElement: HTMLButtonElement;\r\n  private _labelId: string;\r\n  private _descriptionId: string;\r\n  private _ariaDescriptionId: string;\r\n\r\n  constructor(props: IButtonProps, rootClassName: string) {\r\n    super(props);\r\n\r\n    this._warnDeprecations({\r\n      rootProps: null,\r\n      icon: 'iconProps',\r\n      menuIconName: 'menuIconProps'\r\n    });\r\n\r\n    this._labelId = getId();\r\n    this._descriptionId = getId();\r\n    this._ariaDescriptionId = getId();\r\n    this.state = {\r\n      menuProps: null\r\n    };\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    const { description, ariaLabel, ariaDescription, href, disabled, classNames } = this.props;\r\n    const { _ariaDescriptionId, _labelId, _descriptionId } = this;\r\n    const renderAsAnchor: boolean = !!href;\r\n    const tag = renderAsAnchor ? 'a' : 'button';\r\n    const nativeProps = getNativeProps(\r\n      assign({}, this.props.rootProps, this.props),\r\n      renderAsAnchor ? anchorProperties : buttonProperties,\r\n      [\r\n        'disabled' // Let disabled buttons be focused and styled as disabled.\r\n      ]);\r\n\r\n    // Check for ariaDescription, description or aria-describedby in the native props to determine source of aria-describedby\r\n    // otherwise default to null.\r\n    let ariaDescribedBy;\r\n\r\n    if (ariaDescription) {\r\n      ariaDescribedBy = _ariaDescriptionId;\r\n    } else if (description) {\r\n      ariaDescribedBy = _descriptionId;\r\n    } else if (nativeProps['aria-describedby']) {\r\n      ariaDescribedBy = nativeProps['aria-describedby'];\r\n    } else {\r\n      ariaDescribedBy = null;\r\n    }\r\n\r\n    const buttonProps = assign(\r\n      nativeProps,\r\n      {\r\n        className: css(\r\n          styles.root,\r\n          this.props.className,\r\n          classNames.base,\r\n          classNames.variant,\r\n          classNames.root,\r\n          {\r\n            'disabled': disabled,\r\n            [classNames.isDisabled]: disabled,\r\n            [classNames.isEnabled]: !disabled\r\n          }),\r\n        ref: this._resolveRef('_buttonElement'),\r\n        'disabled': disabled,\r\n        'aria-label': ariaLabel,\r\n        'aria-labelledby': ariaLabel ? null : _labelId,\r\n        'aria-describedby': ariaDescribedBy,\r\n        'aria-disabled': disabled\r\n      }\r\n    );\r\n\r\n    // Override onClick if contextualMenuItems passed in. Eventually allow _onToggleMenu to\r\n    // be assigned to split button click if onClick already has a value\r\n    if (this.props.menuProps) {\r\n      assign(buttonProps, { 'onClick': this._onToggleMenu });\r\n    }\r\n\r\n    return this._onRenderContent(tag, buttonProps);\r\n  }\r\n\r\n  public focus(): void {\r\n    if (this._buttonElement) {\r\n      this._buttonElement.focus();\r\n    }\r\n  }\r\n\r\n  private _onRenderContent(tag: any, buttonProps: IButtonProps): JSX.Element {\r\n    let props = this.props;\r\n    let {\r\n      classNames,\r\n      menuIconName,\r\n      menuProps,\r\n      onRenderIcon = this._onRenderIcon,\r\n      onRenderText = this._onRenderText,\r\n      onRenderDescription = this._onRenderDescription,\r\n      onRenderAriaDescription = this._onRenderAriaDescription,\r\n      onRenderChildren = this._onRenderChildren,\r\n      onRenderMenu = this._onRenderMenu,\r\n      onRenderMenuIcon = this._onRenderMenuIcon\r\n    } = props;\r\n    const className = css(classNames.base + '-flexContainer', styles.flexContainer, classNames.flexContainer);\r\n\r\n    return React.createElement(\r\n      tag,\r\n      buttonProps,\r\n      React.createElement(\r\n        'div',\r\n        { className },\r\n        onRenderIcon(props, this._onRenderIcon),\r\n        onRenderText(props, this._onRenderText),\r\n        onRenderDescription(props, this._onRenderDescription),\r\n        onRenderAriaDescription(props, this._onRenderAriaDescription),\r\n        onRenderChildren(props, this._onRenderChildren),\r\n        (menuProps || menuIconName || this.props.onRenderMenuIcon) && onRenderMenuIcon(this.props, this._onRenderMenuIcon),\r\n        this.state.menuProps && onRenderMenu(menuProps, this._onRenderMenu)\r\n      ));\r\n  }\r\n\r\n  @autobind\r\n  private _onRenderIcon(buttonProps?: IButtonProps, defaultRender?: IRenderFunction<IButtonProps>) {\r\n    let { classNames, icon, iconProps } = this.props;\r\n\r\n    if (icon || iconProps) {\r\n      iconProps = iconProps || {\r\n        iconName: icon\r\n      } as IIconProps;\r\n    }\r\n\r\n    return iconProps && (\r\n      <Icon { ...iconProps } className={ css(`${classNames.base}-icon`, classNames.icon, iconProps.className) } />\r\n    );\r\n  }\r\n\r\n  @autobind\r\n  private _onRenderText() {\r\n    let { classNames, children, text } = this.props;\r\n\r\n    // For backwards compat, we should continue to take in the text content from children.\r\n    if (text === undefined && typeof (children) === 'string') {\r\n      text = children;\r\n    }\r\n\r\n    return text && (\r\n      <span className={ css(`${classNames.base}-label`, classNames.label) } id={ this._labelId } >\r\n        { text }\r\n      </span>\r\n    );\r\n  }\r\n\r\n  @autobind\r\n  private _onRenderChildren(): JSX.Element | null {\r\n    const { children } = this.props;\r\n\r\n    // If children is just a string, either it or the text will be rendered via onRenderLabel\r\n    // If children is another component, it will be rendered after text\r\n    if (typeof (children) === 'string') {\r\n      return null;\r\n    }\r\n\r\n    return children as any;\r\n  }\r\n\r\n  @autobind\r\n  private _onRenderDescription() {\r\n    const { classNames, description } = this.props;\r\n\r\n    // ms-Button-description is only shown when the button type is compound.\r\n    // In other cases it will not be displayed.\r\n    return description ? (\r\n      <span\r\n        className={ css(`${classNames.base}-description`, classNames.description) }\r\n        id={ this._descriptionId }\r\n      >\r\n        { description }\r\n      </span>\r\n    ) : (\r\n        null\r\n      );\r\n  }\r\n\r\n  @autobind\r\n  private _onRenderAriaDescription() {\r\n    const { ariaDescription } = this.props;\r\n\r\n    // If ariaDescription is given, descriptionId will be assigned to ariaDescriptionSpan,\r\n    // otherwise it will be assigned to descriptionSpan.\r\n    return ariaDescription ? (\r\n      <span className={ styles.screenReaderOnly } id={ this._ariaDescriptionId }>{ ariaDescription }</span>\r\n    ) : (\r\n        null\r\n      );\r\n  }\r\n\r\n  @autobind\r\n  private _onRenderMenuIcon(props: IButtonProps): JSX.Element | null {\r\n    let { classNames, menuIconProps, menuIconName } = this.props;\r\n\r\n    if (menuIconProps === undefined) {\r\n      menuIconProps = {\r\n        iconName: menuIconName === undefined ? 'ChevronDown' : menuIconName\r\n      };\r\n    }\r\n\r\n    return (\r\n      menuIconProps ?\r\n        <Icon\r\n          { ...menuIconProps }\r\n          className={ css(`${classNames.base}-icon`, classNames.menuIcon, menuIconProps.className) }\r\n        />\r\n        :\r\n        null\r\n    );\r\n  }\r\n\r\n  @autobind\r\n  private _onRenderMenu(menuProps: IContextualMenuProps): JSX.Element {\r\n    return (\r\n      <ContextualMenu\r\n        className={ css('ms-BaseButton-menuHost') }\r\n        isBeakVisible={ true }\r\n        directionalHint={ DirectionalHint.bottomLeftEdge }\r\n        items={ menuProps.items }\r\n        target={ this._buttonElement }\r\n        labelElementId={ this._labelId }\r\n        onDismiss={ this._onToggleMenu }\r\n      />\r\n    );\r\n  }\r\n\r\n  @autobind\r\n  private _onToggleMenu() {\r\n    const { menuProps } = this.props;\r\n    let currentMenuProps = this.state.menuProps;\r\n\r\n    this.setState({ menuProps: currentMenuProps ? null : menuProps });\r\n  }\r\n\r\n}\r\n"],"sourceRoot":"..\\..\\..\\src"}