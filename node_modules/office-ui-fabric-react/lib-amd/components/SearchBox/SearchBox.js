var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
define(["require", "exports", "react", "../../Utilities", "../../Icon", "./SearchBox.scss"], function (require, exports, React, Utilities_1, Icon_1, stylesImport) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var styles = stylesImport;
    var SearchBox = (function (_super) {
        __extends(SearchBox, _super);
        function SearchBox(props) {
            var _this = _super.call(this, props) || this;
            _this.state = {
                value: props.value || '',
                hasFocus: false,
                id: Utilities_1.getId('SearchBox')
            };
            return _this;
        }
        SearchBox.prototype.componentWillReceiveProps = function (newProps) {
            if (newProps.value !== undefined) {
                this._latestValue = newProps.value;
                this.setState({
                    value: newProps.value
                });
            }
        };
        SearchBox.prototype.render = function () {
            var _a = this.props, labelText = _a.labelText, className = _a.className;
            var _b = this.state, value = _b.value, hasFocus = _b.hasFocus, id = _b.id;
            return (React.createElement("div", __assign({ ref: this._resolveRef('_rootElement'), className: Utilities_1.css('ms-SearchBox', className, styles.root, (_c = {},
                    _c['is-active ' + styles.rootIsActive] = hasFocus,
                    _c['can-clear ' + styles.rootCanClear] = value.length > 0,
                    _c)) }, { onFocusCapture: this._onFocusCapture }),
                React.createElement("div", { className: Utilities_1.css('ms-SearchBox-iconContainer', styles.iconContainer) },
                    React.createElement(Icon_1.Icon, { className: Utilities_1.css('ms-SearchBox-icon', styles.icon), iconName: 'Search' })),
                React.createElement("input", { id: id, className: Utilities_1.css('ms-SearchBox-field', styles.field), placeholder: labelText, onChange: this._onInputChange, onInput: this._onInputChange, onKeyDown: this._onKeyDown, value: value, ref: this._resolveRef('_inputElement') }),
                React.createElement("div", { className: Utilities_1.css('ms-SearchBox-clearButton', styles.clearButton), onClick: this._onClearClick },
                    React.createElement(Icon_1.Icon, { iconName: 'Clear' }))));
            var _c;
        };
        /**
         * Sets focus to the search box input field
         */
        SearchBox.prototype.focus = function () {
            if (this._inputElement) {
                this._inputElement.focus();
            }
        };
        SearchBox.prototype._onClearClick = function (ev) {
            this.setState({
                value: ''
            });
            this._callOnChange('');
            ev.stopPropagation();
            ev.preventDefault();
            this._inputElement.focus();
        };
        SearchBox.prototype._onFocusCapture = function (ev) {
            this.setState({
                hasFocus: true
            });
            this._events.on(Utilities_1.getDocument().body, 'focus', this._handleDocumentFocus, true);
        };
        SearchBox.prototype._onKeyDown = function (ev) {
            switch (ev.which) {
                case Utilities_1.KeyCodes.escape:
                    this._onClearClick(ev);
                    break;
                case Utilities_1.KeyCodes.enter:
                    if (this.props.onSearch && this.state.value.length > 0) {
                        this.props.onSearch(this.state.value);
                    }
                    break;
                default:
                    return;
            }
            // We only get here if the keypress has been handled.
            ev.preventDefault();
            ev.stopPropagation();
        };
        SearchBox.prototype._onInputChange = function (ev) {
            var value = this._inputElement.value;
            if (value === this._latestValue) {
                return;
            }
            this._latestValue = value;
            this.setState({ value: value });
            this._callOnChange(value);
        };
        SearchBox.prototype._handleDocumentFocus = function (ev) {
            if (!Utilities_1.elementContains(this._rootElement, ev.target)) {
                this._events.off(Utilities_1.getDocument().body, 'focus');
                this.setState({
                    hasFocus: false
                });
            }
        };
        SearchBox.prototype._callOnChange = function (newValue) {
            var _a = this.props, onChange = _a.onChange, onChanged = _a.onChanged;
            // Call @deprecated method.
            if (onChanged) {
                onChanged(newValue);
            }
            if (onChange) {
                onChange(newValue);
            }
        };
        return SearchBox;
    }(Utilities_1.BaseComponent));
    SearchBox.defaultProps = {
        labelText: 'Search',
    };
    __decorate([
        Utilities_1.autobind
    ], SearchBox.prototype, "_onClearClick", null);
    __decorate([
        Utilities_1.autobind
    ], SearchBox.prototype, "_onFocusCapture", null);
    __decorate([
        Utilities_1.autobind
    ], SearchBox.prototype, "_onKeyDown", null);
    __decorate([
        Utilities_1.autobind
    ], SearchBox.prototype, "_onInputChange", null);
    exports.SearchBox = SearchBox;
});

//# sourceMappingURL=SearchBox.js.map
