var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
define(["require", "exports", "react", "../../Utilities", "./Overlay.scss"], function (require, exports, React, Utilities_1, stylesImport) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var styles = stylesImport;
    var Overlay = (function (_super) {
        __extends(Overlay, _super);
        function Overlay() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Overlay.prototype.componentDidMount = function () {
            Utilities_1.disableBodyScroll();
        };
        Overlay.prototype.componentWillUnmount = function () {
            Utilities_1.enableBodyScroll();
        };
        Overlay.prototype.render = function () {
            var _a = this.props, isDarkThemed = _a.isDarkThemed, className = _a.className;
            var divProps = Utilities_1.getNativeProps(this.props, Utilities_1.divProperties);
            var modifiedClassName = Utilities_1.css('ms-Overlay', styles.root, className, (_b = {},
                _b['ms-Overlay--dark ' + styles.rootIsDark] = isDarkThemed,
                _b));
            return (React.createElement("div", __assign({}, divProps, { className: modifiedClassName })));
            var _b;
        };
        return Overlay;
    }(Utilities_1.BaseComponent));
    exports.Overlay = Overlay;
});

//# sourceMappingURL=Overlay.js.map
