{"version":3,"sources":["components/Modal/Modal.tsx"],"names":[],"mappings":"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","file":"components/Modal/Modal.js","sourcesContent":["import * as React from 'react';\r\nimport {\r\n  BaseComponent,\r\n  css,\r\n  getId\r\n} from '../../Utilities';\r\nimport { FocusTrapZone } from '../FocusTrapZone/index';\r\nimport { IModalProps } from './Modal.Props';\r\nimport { Overlay } from '../../Overlay';\r\nimport { Layer } from '../../Layer';\r\nimport { Popup } from '../Popup/index';\r\nimport { withResponsiveMode, ResponsiveMode } from '../../utilities/decorators/withResponsiveMode';\r\nimport * as stylesImport from './Modal.scss';\r\nconst styles: any = stylesImport;\r\n\r\n// @TODO - need to change this to a panel whenever the breakpoint is under medium (verify the spec)\r\n\r\nexport interface IDialogState {\r\n  isOpen?: boolean;\r\n  isVisible?: boolean;\r\n  isVisibleClose?: boolean;\r\n  id?: string;\r\n}\r\n\r\n@withResponsiveMode\r\nexport class Modal extends BaseComponent<IModalProps, IDialogState> {\r\n\r\n  public static defaultProps: IModalProps = {\r\n    isOpen: false,\r\n    isDarkOverlay: true,\r\n    isBlocking: false,\r\n    className: '',\r\n    containerClassName: '',\r\n  };\r\n\r\n  private _onModalCloseTimer: number;\r\n\r\n  constructor(props: IModalProps) {\r\n    super(props);\r\n    this.state = {\r\n      id: getId('Modal'),\r\n      isOpen: props.isOpen,\r\n      isVisible: props.isOpen,\r\n    };\r\n  }\r\n\r\n  public componentWillReceiveProps(newProps: IModalProps) {\r\n    clearTimeout(this._onModalCloseTimer);\r\n\r\n    // Opening the dialog\r\n    if (newProps.isOpen) {\r\n      if (!this.state.isOpen) {\r\n        // First Open\r\n        this.setState({\r\n          isOpen: true\r\n        });\r\n      } else {\r\n        // Reopen during closing\r\n        this.setState({\r\n          isVisible: true\r\n        });\r\n      }\r\n    }\r\n\r\n    // Closing the dialog\r\n    if (!newProps.isOpen && this.state.isOpen) {\r\n      this._onModalCloseTimer = this._async.setTimeout(this._onModalClose, parseFloat(styles.duration) * 1000);\r\n      this.setState({\r\n        isVisible: false\r\n      });\r\n    }\r\n  }\r\n\r\n  public componentDidUpdate(prevProps: IModalProps, prevState: IDialogState) {\r\n    if (!prevProps.isOpen && !prevState.isVisible) {\r\n      this.setState({\r\n        isVisible: true\r\n      });\r\n    }\r\n  }\r\n\r\n  public render() {\r\n    let {\r\n      elementToFocusOnDismiss,\r\n      firstFocusableSelector,\r\n      forceFocusInsideTrap,\r\n      ignoreExternalFocusing,\r\n      isBlocking,\r\n      isClickableOutsideFocusTrap,\r\n      isDarkOverlay,\r\n      onDismiss,\r\n      onLayerDidMount,\r\n      responsiveMode,\r\n      titleAriaId,\r\n      subtitleAriaId,\r\n    } = this.props;\r\n    let { id, isOpen, isVisible } = this.state;\r\n\r\n    const modalClassName = css('ms-Dialog', styles.root, this.props.className, {\r\n      ['is-open']: isOpen,\r\n      [styles.rootIsVisible]: isVisible,\r\n    });\r\n\r\n    if (!isOpen) {\r\n      return null;\r\n    }\r\n\r\n    // @temp tuatology - Will adjust this to be a panel at certain breakpoints\r\n    if (responsiveMode >= ResponsiveMode.small) {\r\n      return (\r\n        <Layer onLayerDidMount={ onLayerDidMount }>\r\n          <Popup\r\n            role={ isBlocking ? 'alertdialog' : 'dialog' }\r\n            ariaLabelledBy={ titleAriaId }\r\n            ariaDescribedBy={ subtitleAriaId }\r\n            onDismiss={ onDismiss }\r\n          >\r\n            <div className={ modalClassName }>\r\n              <Overlay isDarkThemed={ isDarkOverlay } onClick={ isBlocking ? null : onDismiss } />\r\n              <FocusTrapZone\r\n                className={ css('ms-Dialog-main', styles.main, this.props.containerClassName) }\r\n                elementToFocusOnDismiss={ elementToFocusOnDismiss }\r\n                isClickableOutsideFocusTrap={ isClickableOutsideFocusTrap ? isClickableOutsideFocusTrap : !isBlocking }\r\n                ignoreExternalFocusing={ ignoreExternalFocusing }\r\n                forceFocusInsideTrap={ forceFocusInsideTrap }\r\n                firstFocusableSelector={ firstFocusableSelector }>\r\n                { this.props.children }\r\n              </FocusTrapZone>\r\n            </div>\r\n          </Popup>\r\n        </Layer>\r\n      );\r\n    }\r\n  }\r\n\r\n  // Watch for completed animations and set the state\r\n  private _onModalClose() {\r\n    this.setState({\r\n      isOpen: false\r\n    });\r\n\r\n    // Call the onDismiss callback\r\n    if (this.props.onDismissed) {\r\n      this.props.onDismissed();\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\..\\src"}