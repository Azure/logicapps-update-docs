{"version":3,"sources":["components/pickers/PeoplePicker/PeoplePickerItems/SelectedItemWithMenu.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;IAUA,IAAM,MAAM,GAAQ,YAAY,CAAC;IAMjC;QAA0C,wCAAqE;QAM7G,8BAAY,KAAqC;YAAjD,YACE,kBAAM,KAAK,CAAC,SAIb;YAHC,KAAI,CAAC,gBAAgB,GAAG,KAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,KAAI,CAAC,CAAC;YACzD,KAAI,CAAC,sBAAsB,GAAG,KAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,KAAI,CAAC,CAAC;YACrE,KAAI,CAAC,KAAK,GAAG,EAAE,qBAAqB,EAAE,KAAK,EAAE,CAAC;;QAChD,CAAC;QAEM,qCAAM,GAAb;YACM,IAAA,eAGU,EAFZ,cAAI,EACJ,8BAAY,CACC;YACf,MAAM,CAAC,CACL,kDAAyB,IAAI,EAAG,SAAS,EAAG,eAAG,CAAC,yBAAyB,EAAE,MAAM,CAAC,aAAa,CAAC;gBAC9F,oBAAC,qBAAS,IAAC,SAAS,EAAG,eAAG,CAAC,4BAA4B,EAAE,MAAM,CAAC,gBAAgB,CAAC;oBAC/E,6BAAK,SAAS,EAAG,eAAG,CAAC,uBAAuB,EAAE,MAAM,CAAC,WAAW,CAAC;wBAC/D,oBAAC,iBAAO,eACD,IAAW,IAChB,QAAQ,EAAG,IAAI,CAAC,QAAQ,KAAK,SAAS,GAAG,IAAI,CAAC,QAAQ,GAAG,yBAAe,CAAC,IAAI,IAC7E,CACE;oBACN,6BAAK,GAAG,EAAC,aAAa,EAAC,SAAS,EAAG,eAAG,CAAC,uBAAuB,EAAE,MAAM,CAAC,WAAW,CAAC;wBACjF,oBAAC,mBAAU,IACT,SAAS,EAAG,EAAE,QAAQ,EAAE,MAAM,EAAE,EAChC,OAAO,EAAG,IAAI,CAAC,gBAAgB,GAC/B,CACE;oBACN,6BAAK,SAAS,EAAG,eAAG,CAAC,uBAAuB,EAAE,MAAM,CAAC,WAAW,CAAC;wBAC/D,oBAAC,mBAAU,IACT,SAAS,EAAG,EAAE,QAAQ,EAAE,QAAQ,EAAE,EAClC,OAAO,EAAG,YAAY,GACtB,CACE;oBACJ,IAAI,CAAC,KAAK,CAAC,qBAAqB,GAAG,CACnC,oBAAC,+BAAc,IACb,KAAK,EAAG,IAAI,CAAC,SAAS,EACtB,kBAAkB,EAAG,IAAI,EACzB,aAAa,EAAG,IAAI,CAAC,IAAI,CAAC,WAAW,EACrC,SAAS,EAAG,IAAI,CAAC,sBAAsB,EACvC,eAAe,EAAG,gCAAe,CAAC,cAAc,GAAK,CAAC;0BACtD,IAAI,CACE,CACR,CACP,CAAC;QACJ,CAAC;QAEO,+CAAgB,GAAxB,UAAyB,EAAQ;YAC/B,IAAI,CAAC,QAAQ,CAAC,EAAE,qBAAqB,EAAE,IAAI,EAAE,CAAC,CAAC;QACjD,CAAC;QAEO,qDAAsB,GAA9B,UAA+B,EAAS;YACtC,IAAI,CAAC,QAAQ,CAAC,EAAE,qBAAqB,EAAE,KAAK,EAAE,CAAC,CAAC;QAClD,CAAC;QACH,2BAAC;IAAD,CA3DA,AA2DC,CA3DyC,yBAAa,GA2DtD;IA3DY,oDAAoB","file":"components/pickers/PeoplePicker/PeoplePickerItems/SelectedItemWithMenu.js","sourcesContent":["/* tslint:disable */\r\nimport * as React from 'react';\r\n/* tslint:enable */\r\nimport { BaseComponent, css } from '../../../../Utilities';\r\nimport { IPeoplePickerItemWithMenuProps } from './PeoplePickerItem.Props';\r\nimport { Persona, PersonaPresence } from '../../../../Persona';\r\nimport { ContextualMenu, DirectionalHint } from '../../../../ContextualMenu';\r\nimport { IconButton } from '../../../../Button';\r\nimport { FocusZone } from '../../../../FocusZone';\r\nimport * as stylesImport from './PickerItemsDefault.scss';\r\nconst styles: any = stylesImport;\r\n\r\nexport interface IPeoplePickerItemState {\r\n  contextualMenuVisible: boolean;\r\n}\r\n\r\nexport class SelectedItemWithMenu extends BaseComponent<IPeoplePickerItemWithMenuProps, IPeoplePickerItemState> {\r\n  public refs: {\r\n    [key: string]: any,\r\n    ellipsisRef: HTMLElement\r\n  };\r\n\r\n  constructor(props: IPeoplePickerItemWithMenuProps) {\r\n    super(props);\r\n    this.onContextualMenu = this.onContextualMenu.bind(this);\r\n    this._onCloseContextualMenu = this._onCloseContextualMenu.bind(this);\r\n    this.state = { contextualMenuVisible: false };\r\n  }\r\n\r\n  public render() {\r\n    let {\r\n      item,\r\n      onRemoveItem\r\n    } = this.props;\r\n    return (\r\n      <div data-is-focusable={ true } className={ css('ms-PickerItem-container', styles.itemContainer) }>\r\n        <FocusZone className={ css('ms-PickerPersona-container', styles.personaContainer) } >\r\n          <div className={ css('ms-PickerItem-content', styles.itemContent) }>\r\n            <Persona\r\n              { ...item as any }\r\n              presence={ item.presence !== undefined ? item.presence : PersonaPresence.none }\r\n            />\r\n          </div>\r\n          <div ref='ellipsisRef' className={ css('ms-PickerItem-content', styles.itemContent) }>\r\n            <IconButton\r\n              iconProps={ { iconName: 'More' } }\r\n              onClick={ this.onContextualMenu }\r\n            />\r\n          </div>\r\n          <div className={ css('ms-PickerItem-content', styles.itemContent) }>\r\n            <IconButton\r\n              iconProps={ { iconName: 'Cancel' } }\r\n              onClick={ onRemoveItem }\r\n            />\r\n          </div>\r\n          { this.state.contextualMenuVisible ? (\r\n            <ContextualMenu\r\n              items={ item.menuItems }\r\n              shouldFocusOnMount={ true }\r\n              targetElement={ this.refs.ellipsisRef }\r\n              onDismiss={ this._onCloseContextualMenu }\r\n              directionalHint={ DirectionalHint.bottomAutoEdge } />)\r\n            : null }\r\n        </FocusZone>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private onContextualMenu(ev?: any) {\r\n    this.setState({ contextualMenuVisible: true });\r\n  }\r\n\r\n  private _onCloseContextualMenu(ev: Event) {\r\n    this.setState({ contextualMenuVisible: false });\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\..\\..\\..\\src"}