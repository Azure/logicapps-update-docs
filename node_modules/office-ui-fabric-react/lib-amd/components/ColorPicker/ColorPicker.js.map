{"version":3,"sources":["components/ColorPicker/ColorPicker.tsx"],"names":[],"mappings":"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","file":"components/ColorPicker/ColorPicker.js","sourcesContent":["import * as React from 'react';\r\nimport { autobind, css } from '../../Utilities';\r\nimport { IColorPickerProps } from './ColorPicker.Props';\r\nimport { TextField } from '../../TextField';\r\nimport { ColorRectangle } from './ColorRectangle';\r\nimport { ColorSlider } from './ColorSlider';\r\nimport {\r\n  IColor,\r\n  MAX_COLOR_HUE,\r\n  getColorFromString,\r\n  updateA,\r\n  updateH,\r\n  updateSV\r\n} from './colors';\r\nimport styles from './ColorPicker.scss';\r\n\r\nexport interface IColorPickerState {\r\n  isOpen: boolean;\r\n  color: IColor;\r\n}\r\n\r\nexport interface IColor {\r\n  r: number;\r\n  g: number;\r\n  b: number;\r\n  a: number;\r\n  h: number;\r\n  s: number;\r\n  v: number;\r\n  hex: string;\r\n  str: string;\r\n}\r\n\r\nexport class ColorPicker extends React.Component<IColorPickerProps, IColorPickerState> {\r\n  constructor(props: IColorPickerProps) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      color: getColorFromString(props.color)\r\n    } as IColorPickerState;\r\n  }\r\n\r\n  public componentWillReceiveProps(newProps: IColorPickerProps) {\r\n    if (newProps.color) {\r\n      this._updateColor(getColorFromString(newProps.color));\r\n    }\r\n  }\r\n\r\n  public render() {\r\n    let { color } = this.state;\r\n\r\n    return (\r\n      <div className={ css('ms-ColorPicker', styles.root) }>\r\n        <div className={ css('ms-ColorPicker-panel', styles.panel) }>\r\n          <ColorRectangle color={ color } onSVChanged={ this._onSVChanged } />\r\n          <ColorSlider\r\n            className={ css('is-hue', styles.colorSliderIsHue) }\r\n            minValue={ 0 }\r\n            maxValue={ MAX_COLOR_HUE }\r\n            initialValue={ color.h }\r\n            onChanged={ this._onHChanged }\r\n          />\r\n          { !this.props.alphaSliderHidden && (\r\n            <ColorSlider\r\n              className={ css('is-alpha', styles.colorSliderIsAlpha) }\r\n              overlayStyle={ { background: `linear-gradient(to right, transparent 0, ${color.str} 100%)` } }\r\n              minValue={ 0 }\r\n              maxValue={ 100 }\r\n              initialValue={ color.a }\r\n              onChanged={ this._onAChanged }\r\n            />) }\r\n          <table className='ms-ColorPicker-table' cellPadding='0' cellSpacing='0'>\r\n            <thead>\r\n              <tr className='ms-font-s'>\r\n                <td>Hex</td>\r\n                <td>Red</td>\r\n                <td>Green</td>\r\n                <td>Blue</td>\r\n                { !this.props.alphaSliderHidden && (\r\n                  <td>Alpha</td>) }\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              <tr>\r\n                <td>\r\n                  <TextField className={ css('ms-ColorPicker-input', styles.input) } value={ color.hex } />\r\n                </td>\r\n                <td style={ { width: '18%' } }>\r\n                  <TextField\r\n                    className={ css('ms-ColorPicker-input', styles.input) }\r\n                    value={ String(color.r) }\r\n                  />\r\n                </td>\r\n                <td style={ { width: '18%' } }>\r\n                  <TextField className={ css('ms-ColorPicker-input', styles.input) } value={ String(color.g) } />\r\n                </td>\r\n                <td style={ { width: '18%' } }>\r\n                  <TextField className={ css('ms-ColorPicker-input', styles.input) } value={ String(color.b) } />\r\n                </td>\r\n                { !this.props.alphaSliderHidden && (\r\n                  <td style={ { width: '18%' } }>\r\n                    <TextField className={ css('ms-ColorPicker-input', styles.input) } value={ String(color.a) } />\r\n                  </td>\r\n                ) }\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  @autobind\r\n  private _onSVChanged(s: number, v: number) {\r\n    this._updateColor(updateSV(this.state.color, s, v));\r\n  }\r\n\r\n  @autobind\r\n  private _onHChanged(h: number) {\r\n    this._updateColor(updateH(this.state.color, h));\r\n  }\r\n\r\n  @autobind\r\n  private _onAChanged(a: number) {\r\n    this._updateColor(updateA(this.state.color, a));\r\n  }\r\n\r\n  private _updateColor(newColor: IColor) {\r\n    let { onColorChanged } = this.props;\r\n\r\n    if (newColor.str !== this.state.color.str) {\r\n      this.setState({\r\n        color: newColor\r\n      } as IColorPickerState, () => {\r\n        if (onColorChanged) {\r\n          onColorChanged(newColor.str);\r\n        }\r\n      });\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\..\\src"}