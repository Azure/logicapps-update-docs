{"version":3,"sources":["components/ColorPicker/ColorSlider.tsx"],"names":[],"mappings":"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","file":"components/ColorPicker/ColorSlider.js","sourcesContent":["import * as React from 'react';\r\nimport {\r\n  BaseComponent,\r\n  autobind,\r\n  css\r\n} from '../../Utilities';\r\nimport * as stylesImport from './ColorPicker.scss';\r\nconst styles: any = stylesImport;\r\n\r\nexport interface IColorSliderProps {\r\n  minValue?: number;\r\n  maxValue?: number;\r\n  value?: number;\r\n  thumbColor?: string;\r\n  overlayStyle?: any;\r\n  onChanged?: (newValue: number) => void;\r\n\r\n  className?: string;\r\n  style?: any;\r\n}\r\n\r\nexport interface IColorSliderState {\r\n  isAdjusting?: boolean;\r\n  origin?: { x: number, originalValue: number };\r\n  currentValue?: number;\r\n}\r\n\r\nexport class ColorSlider extends BaseComponent<IColorSliderProps, IColorSliderState> {\r\n  public static defaultProps = {\r\n    minValue: 0,\r\n    maxValue: 100,\r\n    thumbColor: 'inherit',\r\n    value: 0\r\n  };\r\n\r\n  public refs: {\r\n    [key: string]: React.ReactInstance;\r\n    root: HTMLElement;\r\n  };\r\n\r\n  constructor(props: IColorSliderProps) {\r\n    super(props);\r\n\r\n    let { value } = this.props;\r\n\r\n    this.state = {\r\n      isAdjusting: false,\r\n      origin: null,\r\n      currentValue: value\r\n    };\r\n  }\r\n\r\n  public componentWillReceiveProps(newProps: IColorSliderProps) {\r\n    if (newProps && newProps.value) {\r\n      this.setState({ currentValue: newProps.value });\r\n    }\r\n  }\r\n\r\n  public render() {\r\n    let { className, minValue, maxValue, overlayStyle } = this.props;\r\n    let { currentValue, isAdjusting } = this.state;\r\n\r\n    let currentPercentage = 100 * (currentValue - minValue) / (maxValue - minValue);\r\n\r\n    return (\r\n      <div\r\n        ref='root'\r\n        className={ css('ms-ColorPicker-slider', styles.slider, className, {\r\n          'is-adjusting': isAdjusting\r\n        }) }\r\n        onMouseDown={ this._onMouseDown }>\r\n        <div className={ css('ms-ColorPicker-sliderOverlay', styles.sliderOverlay) } style={ overlayStyle } />\r\n        <div className={ css('ms-ColorPicker-thumb is-slider', styles.thumb, styles.thumbIsSlider) } style={ { left: currentPercentage + '%' } } />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  @autobind\r\n  private _onMouseDown(ev: React.MouseEvent<HTMLElement>) {\r\n    this._events.on(window, 'mousemove', this._onMouseMove, true);\r\n    this._events.on(window, 'mouseup', this._onMouseUp, true);\r\n\r\n    this._onMouseMove(ev);\r\n  }\r\n\r\n  @autobind\r\n  private _onMouseMove(ev: React.MouseEvent<HTMLElement>) {\r\n    let { onChanged, minValue, maxValue } = this.props;\r\n    let rectSize = this.refs.root.getBoundingClientRect();\r\n\r\n    let currentPercentage = (ev.clientX - rectSize.left) / rectSize.width;\r\n    let newValue = Math.min(maxValue, Math.max(minValue, currentPercentage * maxValue));\r\n\r\n    this.setState({\r\n      isAdjusting: true,\r\n      currentValue: newValue\r\n    });\r\n\r\n    if (onChanged) {\r\n      onChanged(newValue);\r\n    }\r\n\r\n    ev.preventDefault();\r\n    ev.stopPropagation();\r\n  }\r\n\r\n  @autobind\r\n  private _onMouseUp(ev: React.MouseEvent<HTMLElement>) {\r\n    this._events.off();\r\n\r\n    this.setState({\r\n      isAdjusting: false,\r\n      origin: null\r\n    });\r\n  }\r\n\r\n}\r\n"],"sourceRoot":"..\\..\\..\\src"}