var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
define(["require", "exports", "react", "../../Label", "../../Utilities", "./TextField.scss"], function (require, exports, React, Label_1, Utilities_1, stylesImport) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var styles = stylesImport;
    var TextField = (function (_super) {
        __extends(TextField, _super);
        function TextField(props) {
            var _this = _super.call(this, props) || this;
            _this._warnMutuallyExclusive({
                'value': 'defaultValue'
            });
            _this._id = Utilities_1.getId('TextField');
            _this._descriptionId = Utilities_1.getId('TextFieldDescription');
            _this.state = {
                value: props.value || props.defaultValue || '',
                isFocused: false,
                errorMessage: ''
            };
            _this._onInputChange = _this._onInputChange.bind(_this);
            _this._onFocus = _this._onFocus.bind(_this);
            _this._onBlur = _this._onBlur.bind(_this);
            _this._delayedValidate = _this._async.debounce(_this._validate, _this.props.deferredValidationTime);
            _this._lastValidation = 0;
            _this._isDescriptionAvailable = false;
            return _this;
        }
        Object.defineProperty(TextField.prototype, "value", {
            /**
             * Gets the current value of the text field.
             */
            get: function () {
                return this.state.value;
            },
            enumerable: true,
            configurable: true
        });
        TextField.prototype.componentDidMount = function () {
            this._isMounted = true;
            this._adjustInputHeight();
            if (this.props.validateOnLoad) {
                this._validate(this.state.value);
            }
        };
        TextField.prototype.componentWillReceiveProps = function (newProps) {
            var onBeforeChange = this.props.onBeforeChange;
            if (newProps.value !== undefined && newProps.value !== this.state.value) {
                if (onBeforeChange) {
                    onBeforeChange(newProps.value);
                }
                this._latestValue = newProps.value;
                this.setState({
                    value: newProps.value,
                    errorMessage: ''
                });
                this._delayedValidate(newProps.value);
            }
        };
        TextField.prototype.componentWillUnmount = function () {
            this._isMounted = false;
        };
        TextField.prototype.render = function () {
            var _a = this.props, className = _a.className, description = _a.description, disabled = _a.disabled, iconClass = _a.iconClass, label = _a.label, multiline = _a.multiline, required = _a.required, underlined = _a.underlined, addonString = _a.addonString, _b = _a.onRenderAddon, onRenderAddon = _b === void 0 ? this._onRenderAddon : _b;
            var isFocused = this.state.isFocused;
            var errorMessage = this._errorMessage;
            this._isDescriptionAvailable = Boolean(description || errorMessage);
            var textFieldClassName = Utilities_1.css('ms-TextField', styles.root, className, (_c = {},
                _c['is-required ' + styles.rootIsRequired] = required,
                _c['is-disabled ' + styles.rootIsDisabled] = disabled,
                _c['is-active ' + styles.rootIsActive] = isFocused,
                _c['ms-TextField--multiline ' + styles.rootIsMultiline] = multiline,
                _c['ms-TextField--underlined ' + styles.rootIsUnderlined] = underlined,
                _c));
            return (React.createElement("div", { className: textFieldClassName },
                label && React.createElement(Label_1.Label, { htmlFor: this._id }, label),
                React.createElement("div", { className: Utilities_1.css(styles.fieldGroup) },
                    (addonString !== undefined || this.props.onRenderAddon) && (React.createElement("div", { className: Utilities_1.css(styles.fieldAddon) }, onRenderAddon(this.props, this._onRenderAddon))),
                    multiline ? this._renderTextArea() : this._renderInput(),
                    iconClass && React.createElement("i", { className: Utilities_1.css(iconClass, styles.icon) })),
                this._isDescriptionAvailable &&
                    React.createElement("span", { id: this._descriptionId },
                        description && React.createElement("span", { className: Utilities_1.css('ms-TextField-description', styles.description) }, description),
                        errorMessage &&
                            React.createElement("div", { "aria-live": 'assertive' },
                                React.createElement(Utilities_1.DelayedRender, null,
                                    React.createElement("p", { className: Utilities_1.css('ms-TextField-errorMessage ms-u-slideDownIn20', styles.errorMessage), "data-automation-id": 'error-message' },
                                        React.createElement("i", { className: Utilities_1.css('ms-Icon ms-Icon--Error', styles.errorIcon), "aria-hidden": 'true' }),
                                        errorMessage))))));
            var _c;
        };
        /**
         * Sets focus on the text field
         */
        TextField.prototype.focus = function () {
            if (this._textElement) {
                this._textElement.focus();
            }
        };
        /**
         * Selects the text field
         */
        TextField.prototype.select = function () {
            if (this._textElement) {
                this._textElement.select();
            }
        };
        /**
         * Sets the selection start of the text field to a specified value
         */
        TextField.prototype.setSelectionStart = function (value) {
            if (this._textElement) {
                this._textElement.selectionStart = value;
            }
        };
        /**
         * Sets the selection end of the text field to a specified value
         */
        TextField.prototype.setSelectionEnd = function (value) {
            if (this._textElement) {
                this._textElement.selectionEnd = value;
            }
        };
        TextField.prototype._onFocus = function (ev) {
            if (this.props.onFocus) {
                this.props.onFocus(ev);
            }
            this.setState({ isFocused: true });
            if (this.props.validateOnFocusIn) {
                this._validate(this.state.value);
            }
        };
        TextField.prototype._onBlur = function (ev) {
            if (this.props.onBlur) {
                this.props.onBlur(ev);
            }
            this.setState({ isFocused: false });
            if (this.props.validateOnFocusOut) {
                this._validate(this.state.value);
            }
        };
        TextField.prototype._onRenderAddon = function (props) {
            var addonString = props.addonString;
            return (React.createElement("span", { style: { paddingBottom: '1px' } }, addonString));
        };
        TextField.prototype._getTextElementClassName = function () {
            var errorMessage = this._errorMessage;
            var textFieldClassName;
            if (this.props.multiline && !this.props.resizable) {
                textFieldClassName = Utilities_1.css('ms-TextField-field ms-TextField-field--unresizable', styles.field, styles.fieldIsUnresizable);
            }
            else {
                textFieldClassName = Utilities_1.css('ms-TextField-field', styles.field);
            }
            return Utilities_1.css(textFieldClassName, this.props.inputClassName, (_a = {},
                _a['ms-TextField-invalid ' + styles.invalid] = !!errorMessage,
                _a[styles.hasIcon] = !!this.props.iconClass,
                _a));
            var _a;
        };
        Object.defineProperty(TextField.prototype, "_errorMessage", {
            get: function () {
                var errorMessage = this.state.errorMessage;
                if (!errorMessage) {
                    errorMessage = this.props.errorMessage;
                }
                return errorMessage;
            },
            enumerable: true,
            configurable: true
        });
        TextField.prototype._renderTextArea = function () {
            var textAreaProps = Utilities_1.getNativeProps(this.props, Utilities_1.textAreaProperties, ['defaultValue']);
            return (React.createElement("textarea", __assign({ id: this._id }, textAreaProps, { ref: this._resolveRef('_textElement'), value: this.state.value, onInput: this._onInputChange, onChange: this._onInputChange, className: this._getTextElementClassName(), "aria-describedby": this._isDescriptionAvailable ? this._descriptionId : null, "aria-invalid": !!this.state.errorMessage, "aria-label": this.props.ariaLabel, onFocus: this._onFocus, onBlur: this._onBlur })));
        };
        TextField.prototype._renderInput = function () {
            var inputProps = Utilities_1.getNativeProps(this.props, Utilities_1.inputProperties, ['defaultValue']);
            return (React.createElement("input", __assign({ type: 'text', id: this._id }, inputProps, { ref: this._resolveRef('_textElement'), value: this.state.value, onInput: this._onInputChange, onChange: this._onInputChange, className: this._getTextElementClassName(), "aria-label": this.props.ariaLabel, "aria-describedby": this._isDescriptionAvailable ? this._descriptionId : null, "aria-invalid": !!this.state.errorMessage, onFocus: this._onFocus, onBlur: this._onBlur })));
        };
        TextField.prototype._onInputChange = function (event) {
            var _this = this;
            var element = event.target;
            var value = element.value;
            // Avoid doing unnecessary work when the value has not changed.
            if (value === this._latestValue) {
                return;
            }
            this._latestValue = value;
            this.setState({
                value: value,
                errorMessage: ''
            }, function () {
                _this._adjustInputHeight();
                if (_this.props.onChanged) {
                    _this.props.onChanged(value);
                }
            });
            var _a = this.props, validateOnFocusIn = _a.validateOnFocusIn, validateOnFocusOut = _a.validateOnFocusOut;
            if (!(validateOnFocusIn || validateOnFocusOut)) {
                this._delayedValidate(value);
            }
            var onBeforeChange = this.props.onBeforeChange;
            onBeforeChange(value);
        };
        TextField.prototype._validate = function (value) {
            var _this = this;
            // In case of _validate called multi-times during executing validate logic with promise return.
            if (this._latestValidateValue === value) {
                return;
            }
            this._latestValidateValue = value;
            var onGetErrorMessage = this.props.onGetErrorMessage;
            var result = onGetErrorMessage(value || '');
            if (result !== undefined) {
                if (typeof result === 'string') {
                    this.setState({
                        errorMessage: result
                    });
                    this._notifyAfterValidate(value, result);
                }
                else {
                    var currentValidation_1 = ++this._lastValidation;
                    result.then(function (errorMessage) {
                        if (_this._isMounted && currentValidation_1 === _this._lastValidation) {
                            _this.setState({ errorMessage: errorMessage });
                        }
                        _this._notifyAfterValidate(value, errorMessage);
                    });
                }
            }
            else {
                this._notifyAfterValidate(value, '');
            }
        };
        TextField.prototype._notifyAfterValidate = function (value, errorMessage) {
            if (this._isMounted &&
                value === this.state.value &&
                this.props.onNotifyValidationResult) {
                this.props.onNotifyValidationResult(errorMessage, value);
            }
        };
        TextField.prototype._adjustInputHeight = function () {
            if (this._textElement && this.props.autoAdjustHeight && this.props.multiline) {
                var textField = this._textElement;
                textField.style.height = '';
                var scrollHeight = textField.scrollHeight + 2; // +2 to avoid vertical scroll bars
                textField.style.height = scrollHeight + 'px';
            }
        };
        return TextField;
    }(Utilities_1.BaseComponent));
    TextField.defaultProps = {
        multiline: false,
        resizable: true,
        autoAdjustHeight: false,
        underlined: false,
        onChanged: function () { },
        onBeforeChange: function () { },
        onNotifyValidationResult: function () { },
        onGetErrorMessage: function () { return undefined; },
        deferredValidationTime: 200,
        errorMessage: '',
        validateOnFocusIn: false,
        validateOnFocusOut: false,
        validateOnLoad: true,
    };
    exports.TextField = TextField;
});

//# sourceMappingURL=TextField.js.map
