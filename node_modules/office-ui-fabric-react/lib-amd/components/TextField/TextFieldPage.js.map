{"version":3,"sources":["components/TextField/TextFieldPage.tsx"],"names":[],"mappings":";;;;;;;;;;;;;IAUA,IAAM,yBAAyB,GAAG,OAAO,CAAC,kGAAkG,CAAW,CAAC;IACxJ,IAAM,gCAAgC,GAAG,OAAO,CAAC,yGAAyG,CAAW,CAAC;IAEtK;QAAmC,iCAA4C;QAA/E;;QAqEA,CAAC;QApEQ,8BAAM,GAAb;YACE,MAAM,CAAC,CACL,oBAAC,gCAAa,IACZ,KAAK,EAAC,WAAW,EACjB,aAAa,EAAC,kBAAkB,EAChC,YAAY,EACV;oBACE,oBAAC,8BAAW,IAAC,KAAK,EAAC,sBAAsB,EAAC,IAAI,EAAG,yBAAyB;wBACxE,oBAAC,+CAAqB,OAAG,CACb;oBACd,oBAAC,8BAAW,IAAC,KAAK,EAAC,oCAAoC,EAAC,IAAI,EAAG,gCAAgC;wBAC7F,oBAAC,6DAA4B,OAAG,CACpB,CACV,EAER,gBAAgB,EACd,oBAAC,qCAAkB,IACjB,OAAO,EAAG;wBACR,OAAO,CAAS,gFAAgF,CAAC;qBAClG,GACD,EAEJ,QAAQ,EACN;oBACE,8QAEI,CACA,EAER,aAAa,EACX,gCAAW,EAEb,GAAG,EACD;oBACE;wBACE,4FAAkE;wBAClE,4EAAkD;wBAClD,qHAA2F;wBAC3F,sIAA4G;wBAC5G,8HAAoG;wBACpG,mJAA+G;wBAC/G,kIAA8F;wBAC9F,qFAA2D;wBAC3D,oKAA0I;wBAC1I,uIAA6G;wBAC7G,iIAAuG;wBACvG,kIAAwG,CACrG,CACD,EAER,KAAK,EACH;oBACE;wBACE,uHAAwF;wBACxF,gIAAiG;wBACjG,wFAAyD;wBACzD,iFAAkD;wBAClD,sHAAuF,CACpF,CACD,EAER,OAAO,EACL,2BAAG,IAAI,EAAC,sEAAsE,gBAAc,EAE9F,eAAe,EAAG,IAAI,CAAC,KAAK,CAAC,eAAe,GAC9B,CACjB,CAAC;QACJ,CAAC;QACH,oBAAC;IAAD,CArEA,AAqEC,CArEkC,KAAK,CAAC,SAAS,GAqEjD;IArEY,sCAAa","file":"components/TextField/TextFieldPage.js","sourcesContent":["import * as React from 'react';\r\nimport {\r\n  ExampleCard,\r\n  ComponentPage,\r\n  IComponentDemoPageProps,\r\n  PropertiesTableSet\r\n} from '@uifabric/example-app-base';\r\nimport { TextFieldBasicExample } from './examples/TextField.Basic.Example';\r\nimport { TextFieldErrorMessageExample } from './examples/TextField.ErrorMessage.Example';\r\n\r\nconst TextFieldBasicExampleCode = require('!raw-loader!office-ui-fabric-react/src/components/TextField/examples/TextField.Basic.Example.tsx') as string;\r\nconst TextFieldErrorMessageExampleCode = require('!raw-loader!office-ui-fabric-react/src/components/TextField/examples/TextField.ErrorMessage.Example.tsx') as string;\r\n\r\nexport class TextFieldPage extends React.Component<IComponentDemoPageProps, {}> {\r\n  public render() {\r\n    return (\r\n      <ComponentPage\r\n        title='TextField'\r\n        componentName='TextFieldExample'\r\n        exampleCards={\r\n          <div>\r\n            <ExampleCard title='TextField variations' code={ TextFieldBasicExampleCode }>\r\n              <TextFieldBasicExample />\r\n            </ExampleCard>\r\n            <ExampleCard title='TextField error message variations' code={ TextFieldErrorMessageExampleCode }>\r\n              <TextFieldErrorMessageExample />\r\n            </ExampleCard>\r\n          </div>\r\n        }\r\n        propertiesTables={\r\n          <PropertiesTableSet\r\n            sources={ [\r\n              require<string>('!raw-loader!office-ui-fabric-react/src/components/TextField/TextField.Props.ts')\r\n            ] }\r\n          />\r\n        }\r\n        overview={\r\n          <div>\r\n            <p>\r\n              The TextField component enables a user to type text into an app. It's typically used to capture a single line of text, but can be configured to capture multiple lines of text. The text displays on the screen in a simple, uniform format.\r\n            </p>\r\n          </div>\r\n        }\r\n        bestPractices={\r\n          <div></div>\r\n        }\r\n        dos={\r\n          <div>\r\n            <ul>\r\n              <li>Use the TextField to accept data input on a form or page.</li>\r\n              <li>Label the TextField with a helpful name. </li>\r\n              <li>Provide concise helper text that specifies what content is expected to be entered.</li>\r\n              <li>Provide all appropriate states for the control (static, hover, focus, engaged, unavailable, error).</li>\r\n              <li>When part of a form, provide clear designations for which fields are required vs. optional.</li>\r\n              <li>Provide all appropriate methods for submitting provided data (onEnter or a dedicated ‘Submit’ button).</li>\r\n              <li>Provide all appropriate methods of clearing provided data (‘X’ or something similar).</li>\r\n              <li>Allow for selection, copy and paste of field data.</li>\r\n              <li>Whenever possible, format TextField relative to the expected entry (4-digit PIN, 10-digit phone number (3 separate fields), etc).</li>\r\n              <li>When long entries are expected, provide a mechanism for overflow or expansion of the control itself.</li>\r\n              <li>Ensure that the TextField is functional through use of mouse/keyboard or touch when available.</li>\r\n              <li>Ensure that the TextField is accessible through screen reader and/or other accessibility tools.</li>\r\n            </ul>\r\n          </div>\r\n        }\r\n        donts={\r\n          <div>\r\n            <ul>\r\n              <li>Don’t use a TextField to render basic copy as part of a body element of a page.</li>\r\n              <li>Don’t provide an unlabeled TextField and expect that users will know what to do with it.</li>\r\n              <li>Don’t place a TextField inline with body copy.  </li>\r\n              <li>Don’t be overly verbose with helper text.</li>\r\n              <li>Don’t occlude the entry or allow entry when the active content is not visible.</li>\r\n            </ul>\r\n          </div>\r\n        }\r\n        related={\r\n          <a href='https://dev.office.com/fabric-js/Components/TextField/TextField.html'>Fabric JS</a>\r\n        }\r\n        isHeaderVisible={ this.props.isHeaderVisible }>\r\n      </ComponentPage>\r\n    );\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\..\\src"}