var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
define(["require", "exports", "react", "office-ui-fabric-react/lib/Dialog", "office-ui-fabric-react/lib/Button", "office-ui-fabric-react/lib/ChoiceGroup", "./Dialog.Basic.Example.scss"], function (require, exports, React, Dialog_1, Button_1, ChoiceGroup_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var DialogBasicExample = (function (_super) {
        __extends(DialogBasicExample, _super);
        function DialogBasicExample() {
            var _this = _super.call(this) || this;
            _this.state = {
                showDialog: false
            };
            return _this;
        }
        DialogBasicExample.prototype.render = function () {
            return (React.createElement("div", null,
                React.createElement(Button_1.DefaultButton, { description: 'Opens the Sample Dialog', onClick: this._showDialog.bind(this), text: 'Open Dialog' }),
                React.createElement(Dialog_1.Dialog, { isOpen: this.state.showDialog, type: Dialog_1.DialogType.normal, onDismiss: this._closeDialog.bind(this), title: 'All emails together', subText: 'Your Inbox has changed. No longer does it include favorites, it is a singular destination for your emails.', isBlocking: false, containerClassName: 'ms-dialogMainOverride' },
                    React.createElement(ChoiceGroup_1.ChoiceGroup, { options: [
                            {
                                key: 'A',
                                text: 'Option A'
                            },
                            {
                                key: 'B',
                                text: 'Option B',
                                checked: true
                            },
                            {
                                key: 'C',
                                text: 'Option C',
                                disabled: true
                            }
                        ], onChanged: this._onChoiceChanged }),
                    null /** You can also include null values as the result of conditionals */,
                    React.createElement(Dialog_1.DialogFooter, null,
                        React.createElement(Button_1.PrimaryButton, { onClick: this._closeDialog.bind(this), text: 'Save' }),
                        React.createElement(Button_1.DefaultButton, { onClick: this._closeDialog.bind(this), text: 'Cancel' })))));
        };
        DialogBasicExample.prototype._showDialog = function () {
            this.setState({ showDialog: true });
        };
        DialogBasicExample.prototype._closeDialog = function () {
            this.setState({ showDialog: false });
        };
        DialogBasicExample.prototype._onChoiceChanged = function () {
            console.log('Choice option change');
        };
        return DialogBasicExample;
    }(React.Component));
    exports.DialogBasicExample = DialogBasicExample;
});

//# sourceMappingURL=Dialog.Basic.Example.js.map
