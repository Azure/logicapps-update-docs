var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
define(["require", "exports", "react", "../../Utilities", "../FocusTrapZone/index", "./Panel.Props", "../Layer/Layer", "../../Overlay", "../../Popup", "../../Button", "./Panel.scss"], function (require, exports, React, Utilities_1, index_1, Panel_Props_1, Layer_1, Overlay_1, Popup_1, Button_1, stylesImport) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var styles = stylesImport;
    // Animation class constants.
    var FADE_IN_200 = 'ms-u-fadeIn200';
    var FADE_OUT_200 = 'ms-u-fadeOut200';
    var SLIDE_LEFT_IN_40 = 'ms-u-slideLeftIn40';
    var SLIDE_LEFT_OUT_40 = 'ms-u-slideLeftOut40';
    var SLIDE_RIGHT_IN_40 = 'ms-u-slideRightIn40';
    var SLIDE_RIGHT_OUT_40 = 'ms-u-slideRightOut40';
    var Panel = (function (_super) {
        __extends(Panel, _super);
        function Panel(props) {
            var _this = _super.call(this, props) || this;
            _this._onPanelClick = _this._onPanelClick.bind(_this);
            _this._onPanelRef = _this._onPanelRef.bind(_this);
            _this.state = {
                isFooterSticky: false,
                isOpen: !!props.isOpen,
                isAnimatingOpen: props.isOpen,
                isAnimatingClose: false,
                id: Utilities_1.getId('Panel')
            };
            return _this;
        }
        Panel.prototype.componentDidMount = function () {
            var _this = this;
            this._events.on(window, 'resize', this._updateFooterPosition);
            if (this.state.isOpen) {
                this._async.setTimeout(function () {
                    _this.setState({
                        isAnimatingOpen: false
                    });
                }, 2000);
            }
        };
        Panel.prototype.componentWillReceiveProps = function (newProps) {
            if (newProps.isOpen !== this.state.isOpen) {
                this.setState({
                    isOpen: true,
                    isAnimatingOpen: newProps.isOpen ? true : false,
                    isAnimatingClose: newProps.isOpen ? false : true
                });
            }
        };
        Panel.prototype.componentDidUpdate = function (prevProps, prevState) {
            if (prevState.isOpen === false) {
                this._updateFooterPosition();
            }
            if (prevState.isAnimatingClose === false &&
                this.state.isAnimatingClose === true &&
                this.props.onDismiss) {
                this.props.onDismiss();
            }
        };
        Panel.prototype.render = function () {
            var _a = this.props, children = _a.children, _b = _a.className, className = _b === void 0 ? '' : _b, closeButtonAriaLabel = _a.closeButtonAriaLabel, elementToFocusOnDismiss = _a.elementToFocusOnDismiss, firstFocusableSelector = _a.firstFocusableSelector, forceFocusInsideTrap = _a.forceFocusInsideTrap, hasCloseButton = _a.hasCloseButton, headerText = _a.headerText, ignoreExternalFocusing = _a.ignoreExternalFocusing, isBlocking = _a.isBlocking, isLightDismiss = _a.isLightDismiss, layerProps = _a.layerProps, type = _a.type, customWidth = _a.customWidth, _c = _a.onRenderNavigation, onRenderNavigation = _c === void 0 ? this._onRenderNavigation : _c, _d = _a.onRenderHeader, onRenderHeader = _d === void 0 ? this._onRenderHeader : _d, _e = _a.onRenderBody, onRenderBody = _e === void 0 ? this._onRenderBody : _e, _f = _a.onRenderFooter, onRenderFooter = _f === void 0 ? this._onRenderFooter : _f;
            var _g = this.state, isOpen = _g.isOpen, isAnimatingOpen = _g.isAnimatingOpen, isAnimatingClose = _g.isAnimatingClose, id = _g.id, isFooterSticky = _g.isFooterSticky;
            var isLeft = type === Panel_Props_1.PanelType.smallFixedNear ? true : false;
            var isRTL = Utilities_1.getRTL();
            var isOnRightSide = isRTL ? isLeft : !isLeft;
            var headerTextId = id + '-headerText';
            var customWidthStyles = (type === Panel_Props_1.PanelType.custom) ? { width: customWidth } : {};
            if (!isOpen) {
                return null;
            }
            var overlay;
            if (isBlocking) {
                overlay = (React.createElement(Overlay_1.Overlay, { className: Utilities_1.css(styles.overlay, (_h = {},
                        _h[FADE_IN_200] = isAnimatingOpen,
                        _h[FADE_OUT_200] = isAnimatingClose,
                        _h)), isDarkThemed: false, onClick: isLightDismiss ? this._onPanelClick : null }));
            }
            return (React.createElement(Layer_1.Layer, __assign({}, layerProps),
                React.createElement(Popup_1.Popup, { role: 'dialog', ariaLabelledBy: headerText && headerTextId, onDismiss: this.props.onDismiss },
                    React.createElement("div", { ref: this._onPanelRef, className: Utilities_1.css('ms-Panel', styles.root, className, (_j = {},
                            // because the RTL animations are not being used, we need to set a class
                            _j['is-open ' + styles.rootIsOpen] = isOpen,
                            _j['ms-Panel--smFluid ' + styles.rootIsSmallFluid] = type === Panel_Props_1.PanelType.smallFluid,
                            _j['ms-Panel--smLeft ' + styles.rootIsSmallLeft] = type === Panel_Props_1.PanelType.smallFixedNear,
                            _j['ms-Panel--sm ' + styles.rootIsSmall] = type === Panel_Props_1.PanelType.smallFixedFar,
                            _j['ms-Panel--md ' + styles.rootIsMedium] = type === Panel_Props_1.PanelType.medium,
                            _j['ms-Panel--lg ' + styles.rootIsLarge] = type === Panel_Props_1.PanelType.large || type === Panel_Props_1.PanelType.largeFixed,
                            _j['ms-Panel--fixed ' + styles.rootIsFixed] = type === Panel_Props_1.PanelType.largeFixed,
                            _j['ms-Panel--xl ' + styles.rootIsXLarge] = type === Panel_Props_1.PanelType.extraLarge,
                            _j['ms-Panel--custom ' + styles.rootIsCustom] = type === Panel_Props_1.PanelType.custom,
                            _j['ms-Panel--hasCloseButton ' + styles.rootHasCloseButton] = hasCloseButton,
                            _j)) },
                        overlay,
                        React.createElement(index_1.FocusTrapZone, { className: Utilities_1.css('ms-Panel-main', styles.main, (_k = {},
                                _k[SLIDE_RIGHT_IN_40] = isAnimatingOpen && !isOnRightSide,
                                _k[SLIDE_LEFT_IN_40] = isAnimatingOpen && isOnRightSide,
                                _k[SLIDE_LEFT_OUT_40] = isAnimatingClose && !isOnRightSide,
                                _k[SLIDE_RIGHT_OUT_40] = isAnimatingClose && isOnRightSide,
                                _k)), style: customWidthStyles, elementToFocusOnDismiss: elementToFocusOnDismiss, isClickableOutsideFocusTrap: isLightDismiss, ignoreExternalFocusing: ignoreExternalFocusing, forceFocusInsideTrap: forceFocusInsideTrap, firstFocusableSelector: firstFocusableSelector },
                            React.createElement("div", { className: Utilities_1.css('ms-Panel-commands'), "data-is-visible": true }, onRenderNavigation(this.props, this._onRenderNavigation)),
                            React.createElement("div", { className: Utilities_1.css('ms-Panel-contentInner', styles.contentInner) },
                                onRenderHeader(this.props, this._onRenderHeader),
                                onRenderBody(this.props, this._onRenderBody),
                                onRenderFooter(this.props, this._onRenderFooter)))))));
            var _h, _j, _k;
        };
        Panel.prototype.dismiss = function () {
            if (this.state.isOpen) {
                this.setState({
                    isAnimatingOpen: false,
                    isAnimatingClose: true
                });
            }
        };
        Panel.prototype._onRenderNavigation = function (props) {
            var closeButtonAriaLabel = props.closeButtonAriaLabel, hasCloseButton = props.hasCloseButton;
            return (hasCloseButton &&
                React.createElement(Button_1.IconButton, { className: Utilities_1.css('ms-Panel-closeButton ms-PanelAction-close', styles.closeButton), onClick: this._onPanelClick, ariaLabel: closeButtonAriaLabel, "data-is-visible": true, iconProps: { iconName: 'Cancel' } }));
        };
        Panel.prototype._onRenderHeader = function (props) {
            var headerText = props.headerText, headerTextId = props.headerTextId, _a = props.headerClassName, headerClassName = _a === void 0 ? '' : _a;
            return (headerText &&
                React.createElement("div", { className: Utilities_1.css('ms-Panel-header', styles.header) },
                    React.createElement("p", { className: Utilities_1.css('ms-Panel-headerText', styles.headerText, headerClassName), id: headerTextId, role: 'heading' }, headerText)));
        };
        Panel.prototype._onRenderBody = function (props) {
            return (React.createElement("div", { className: Utilities_1.css('ms-Panel-content', styles.content), ref: this._resolveRef('_content') }, props.children));
        };
        Panel.prototype._onRenderFooter = function (props) {
            var isFooterSticky = this.state.isFooterSticky;
            var _a = this.props.onRenderFooterContent, onRenderFooterContent = _a === void 0 ? null : _a;
            return (onRenderFooterContent != null &&
                React.createElement("div", { className: Utilities_1.css('ms-Panel-footer', styles.footer, isFooterSticky && styles.footerIsSticky) },
                    React.createElement("div", { className: Utilities_1.css('ms-Panel-footerInner', styles.footerInner) }, onRenderFooterContent())));
        };
        Panel.prototype._updateFooterPosition = function () {
            var _content = this._content;
            if (_content) {
                var height = _content.clientHeight;
                var innerHeight_1 = _content.scrollHeight;
                this.setState({
                    isFooterSticky: height < innerHeight_1 ? true : false
                });
            }
        };
        Panel.prototype._onPanelClick = function () {
            this.dismiss();
        };
        Panel.prototype._onPanelRef = function (ref) {
            if (ref) {
                this._events.on(ref, 'animationend', this._onAnimationEnd);
            }
            else {
                this._events.off();
            }
        };
        Panel.prototype._onAnimationEnd = function (ev) {
            if (ev.animationName.indexOf('In') > -1) {
                this.setState({
                    isOpen: true,
                    isAnimatingOpen: false
                });
            }
            if (ev.animationName.indexOf('Out') > -1) {
                this.setState({
                    isOpen: false,
                    isAnimatingClose: false
                });
                if (this.props.onDismissed) {
                    this.props.onDismissed();
                }
            }
        };
        return Panel;
    }(Utilities_1.BaseComponent));
    Panel.defaultProps = {
        isOpen: false,
        isBlocking: true,
        hasCloseButton: true,
        type: Panel_Props_1.PanelType.smallFixedFar,
    };
    __decorate([
        Utilities_1.autobind
    ], Panel.prototype, "_onRenderNavigation", null);
    __decorate([
        Utilities_1.autobind
    ], Panel.prototype, "_onRenderHeader", null);
    __decorate([
        Utilities_1.autobind
    ], Panel.prototype, "_onRenderBody", null);
    __decorate([
        Utilities_1.autobind
    ], Panel.prototype, "_onRenderFooter", null);
    exports.Panel = Panel;
});

//# sourceMappingURL=Panel.js.map
